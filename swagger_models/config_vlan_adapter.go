// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigVlanAdapter VlanAdapter represents a single VLAN sub-interface.
// The parent, which is referenced by lower_layer_name,
// should be either PhysicalIO or BondAdapter.
//
// swagger:model configVlanAdapter
type ConfigVlanAdapter struct {

	// A physical name of the VLAN sub-interface.
	// Note that the interface name is limited in Linux kernel to 15 characters.
	// If not defined, logicallabel will be used instead.
	InterfaceName string `json:"interfaceName,omitempty"`

	// Logical name of this VLAN adapter.
	Logicallabel string `json:"logicallabel,omitempty"`

	// Logical name of the lower layer adapter (bond or physicalIO).
	LowerLayerName string `json:"lowerLayerName,omitempty"`

	// VLAN ID. Valid values are from 1 to 4094.
	VlanID int64 `json:"vlanId,omitempty"`
}

// Validate validates this config vlan adapter
func (m *ConfigVlanAdapter) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this config vlan adapter based on context it is used
func (m *ConfigVlanAdapter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigVlanAdapter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigVlanAdapter) UnmarshalBinary(b []byte) error {
	var res ConfigVlanAdapter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
