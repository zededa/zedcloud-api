// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigDiskConfig DiskConfig describe desired configuration of disk
// If we want change state to online/offline we should define its state
// If we want to add disk we should define it here and set DiskConfigType to online or offline
// If we want to remove disk we should set its state to unused or appdirect
// If we want to replace disk we should fill old_disk to be replaced with disk
// Progress of operation is expected to be available in info messages
//
// swagger:model configDiskConfig
type ConfigDiskConfig struct {

	// disk
	Disk *EvecommonDiskDescription `json:"disk,omitempty"`

	// disk config
	DiskConfig *ConfigDiskConfigType `json:"diskConfig,omitempty"`

	// define old disk here to replace it with new one defined in disk, omit it to not use replacement
	OldDisk *EvecommonDiskDescription `json:"oldDisk,omitempty"`
}

// Validate validates this config disk config
func (m *ConfigDiskConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldDisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigDiskConfig) validateDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigDiskConfig) validateDiskConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskConfig) { // not required
		return nil
	}

	if m.DiskConfig != nil {
		if err := m.DiskConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigDiskConfig) validateOldDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.OldDisk) { // not required
		return nil
	}

	if m.OldDisk != nil {
		if err := m.OldDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oldDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oldDisk")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config disk config based on the context it is used
func (m *ConfigDiskConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiskConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOldDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigDiskConfig) contextValidateDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.Disk != nil {
		if err := m.Disk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigDiskConfig) contextValidateDiskConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskConfig != nil {
		if err := m.DiskConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigDiskConfig) contextValidateOldDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.OldDisk != nil {
		if err := m.OldDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oldDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oldDisk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigDiskConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigDiskConfig) UnmarshalBinary(b []byte) error {
	var res ConfigDiskConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
