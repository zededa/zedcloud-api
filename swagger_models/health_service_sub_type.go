// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HealthServiceSubType health service sub type
//
// swagger:model HealthServiceSubType
type HealthServiceSubType string

func NewHealthServiceSubType(value HealthServiceSubType) *HealthServiceSubType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HealthServiceSubType.
func (m HealthServiceSubType) Pointer() *HealthServiceSubType {
	return &m
}

const (

	// HealthServiceSubTypePublisher captures enum value "Publisher"
	HealthServiceSubTypePublisher HealthServiceSubType = "Publisher"

	// HealthServiceSubTypeSubscriber captures enum value "Subscriber"
	HealthServiceSubTypeSubscriber HealthServiceSubType = "Subscriber"
)

// for schema
var healthServiceSubTypeEnum []interface{}

func init() {
	var res []HealthServiceSubType
	if err := json.Unmarshal([]byte(`["Publisher","Subscriber"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthServiceSubTypeEnum = append(healthServiceSubTypeEnum, v)
	}
}

func (m HealthServiceSubType) validateHealthServiceSubTypeEnum(path, location string, value HealthServiceSubType) error {
	if err := validate.EnumCase(path, location, value, healthServiceSubTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this health service sub type
func (m HealthServiceSubType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHealthServiceSubTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this health service sub type based on context it is used
func (m HealthServiceSubType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
