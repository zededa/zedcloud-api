// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigAddressType config address type
//
// swagger:model configAddressType
type ConfigAddressType string

func NewConfigAddressType(value ConfigAddressType) *ConfigAddressType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigAddressType.
func (m ConfigAddressType) Pointer() *ConfigAddressType {
	return &m
}

const (

	// ConfigAddressTypeFirst captures enum value "First"
	ConfigAddressTypeFirst ConfigAddressType = "First"

	// ConfigAddressTypeIPV4 captures enum value "IPV4"
	ConfigAddressTypeIPV4 ConfigAddressType = "IPV4"

	// ConfigAddressTypeIPV6 captures enum value "IPV6"
	ConfigAddressTypeIPV6 ConfigAddressType = "IPV6"

	// ConfigAddressTypeCryptoIPV4 captures enum value "CryptoIPV4"
	ConfigAddressTypeCryptoIPV4 ConfigAddressType = "CryptoIPV4"

	// ConfigAddressTypeCryptoIPV6 captures enum value "CryptoIPV6"
	ConfigAddressTypeCryptoIPV6 ConfigAddressType = "CryptoIPV6"

	// ConfigAddressTypeLast captures enum value "Last"
	ConfigAddressTypeLast ConfigAddressType = "Last"
)

// for schema
var configAddressTypeEnum []interface{}

func init() {
	var res []ConfigAddressType
	if err := json.Unmarshal([]byte(`["First","IPV4","IPV6","CryptoIPV4","CryptoIPV6","Last"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configAddressTypeEnum = append(configAddressTypeEnum, v)
	}
}

func (m ConfigAddressType) validateConfigAddressTypeEnum(path, location string, value ConfigAddressType) error {
	if err := validate.EnumCase(path, location, value, configAddressTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config address type
func (m ConfigAddressType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigAddressTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config address type based on context it is used
func (m ConfigAddressType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
