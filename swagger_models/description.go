// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Description Description encapsulates the top level Description of the operation
//
// Description encapsulates the top level Description of the operation
//
// swagger:model Description
type Description struct {

	// description code for an operation
	// Read Only: true
	DescCode *DecsriptionCode `json:"descCode,omitempty"`

	// description of an operation
	// Read Only: true
	DescMessage string `json:"descMessage,omitempty"`
}

// Validate validates this description
func (m *Description) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Description) validateDescCode(formats strfmt.Registry) error {
	if swag.IsZero(m.DescCode) { // not required
		return nil
	}

	if m.DescCode != nil {
		if err := m.DescCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descCode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this description based on the context it is used
func (m *Description) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Description) contextValidateDescCode(ctx context.Context, formats strfmt.Registry) error {

	if m.DescCode != nil {
		if err := m.DescCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descCode")
			}
			return err
		}
	}

	return nil
}

func (m *Description) contextValidateDescMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "descMessage", "body", string(m.DescMessage)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Description) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Description) UnmarshalBinary(b []byte) error {
	var res Description
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
