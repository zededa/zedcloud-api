// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonPhyIoType common phy io type
//
// swagger:model commonPhyIoType
type CommonPhyIoType string

func NewCommonPhyIoType(value CommonPhyIoType) *CommonPhyIoType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonPhyIoType.
func (m CommonPhyIoType) Pointer() *CommonPhyIoType {
	return &m
}

const (

	// CommonPhyIoTypePhyIoNoop captures enum value "PhyIoNoop"
	CommonPhyIoTypePhyIoNoop CommonPhyIoType = "PhyIoNoop"

	// CommonPhyIoTypePhyIoNetEth captures enum value "PhyIoNetEth"
	CommonPhyIoTypePhyIoNetEth CommonPhyIoType = "PhyIoNetEth"

	// CommonPhyIoTypePhyIoUSB captures enum value "PhyIoUSB"
	CommonPhyIoTypePhyIoUSB CommonPhyIoType = "PhyIoUSB"

	// CommonPhyIoTypePhyIoCOM captures enum value "PhyIoCOM"
	CommonPhyIoTypePhyIoCOM CommonPhyIoType = "PhyIoCOM"

	// CommonPhyIoTypePhyIoAudio captures enum value "PhyIoAudio"
	CommonPhyIoTypePhyIoAudio CommonPhyIoType = "PhyIoAudio"

	// CommonPhyIoTypePhyIoNetWLAN captures enum value "PhyIoNetWLAN"
	CommonPhyIoTypePhyIoNetWLAN CommonPhyIoType = "PhyIoNetWLAN"

	// CommonPhyIoTypePhyIoNetWWAN captures enum value "PhyIoNetWWAN"
	CommonPhyIoTypePhyIoNetWWAN CommonPhyIoType = "PhyIoNetWWAN"

	// CommonPhyIoTypePhyIoHDMI captures enum value "PhyIoHDMI"
	CommonPhyIoTypePhyIoHDMI CommonPhyIoType = "PhyIoHDMI"

	// CommonPhyIoTypePhyIoOther captures enum value "PhyIoOther"
	CommonPhyIoTypePhyIoOther CommonPhyIoType = "PhyIoOther"
)

// for schema
var commonPhyIoTypeEnum []interface{}

func init() {
	var res []CommonPhyIoType
	if err := json.Unmarshal([]byte(`["PhyIoNoop","PhyIoNetEth","PhyIoUSB","PhyIoCOM","PhyIoAudio","PhyIoNetWLAN","PhyIoNetWWAN","PhyIoHDMI","PhyIoOther"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonPhyIoTypeEnum = append(commonPhyIoTypeEnum, v)
	}
}

func (m CommonPhyIoType) validateCommonPhyIoTypeEnum(path, location string, value CommonPhyIoType) error {
	if err := validate.EnumCase(path, location, value, commonPhyIoTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common phy io type
func (m CommonPhyIoType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonPhyIoTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common phy io type based on context it is used
func (m CommonPhyIoType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
