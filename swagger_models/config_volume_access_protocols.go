// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigVolumeAccessProtocols The protocol that the task will use to access the Volume
//
// swagger:model configVolumeAccessProtocols
type ConfigVolumeAccessProtocols string

func NewConfigVolumeAccessProtocols(value ConfigVolumeAccessProtocols) *ConfigVolumeAccessProtocols {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigVolumeAccessProtocols.
func (m ConfigVolumeAccessProtocols) Pointer() *ConfigVolumeAccessProtocols {
	return &m
}

const (

	// ConfigVolumeAccessProtocolsVAPNONE captures enum value "VAP_NONE"
	ConfigVolumeAccessProtocolsVAPNONE ConfigVolumeAccessProtocols = "VAP_NONE"

	// ConfigVolumeAccessProtocolsVAP9P captures enum value "VAP_9P"
	ConfigVolumeAccessProtocolsVAP9P ConfigVolumeAccessProtocols = "VAP_9P"
)

// for schema
var configVolumeAccessProtocolsEnum []interface{}

func init() {
	var res []ConfigVolumeAccessProtocols
	if err := json.Unmarshal([]byte(`["VAP_NONE","VAP_9P"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configVolumeAccessProtocolsEnum = append(configVolumeAccessProtocolsEnum, v)
	}
}

func (m ConfigVolumeAccessProtocols) validateConfigVolumeAccessProtocolsEnum(path, location string, value ConfigVolumeAccessProtocols) error {
	if err := validate.EnumCase(path, location, value, configVolumeAccessProtocolsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config volume access protocols
func (m ConfigVolumeAccessProtocols) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigVolumeAccessProtocolsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config volume access protocols based on context it is used
func (m ConfigVolumeAccessProtocols) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
