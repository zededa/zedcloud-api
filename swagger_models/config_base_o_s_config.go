// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigBaseOSConfig config base o s config
//
// swagger:model configBaseOSConfig
type ConfigBaseOSConfig struct {

	// activate
	Activate bool `json:"activate,omitempty"`

	// base o s version
	BaseOSVersion string `json:"baseOSVersion,omitempty"`

	// volumeID will supersede drives. Drives still
	// exist for backward compatibility.
	// Drives will be deprecated in the future.
	Drives []*ConfigDrive `json:"drives"`

	// uuidandversion
	Uuidandversion *ConfigUUIDandVersion `json:"uuidandversion,omitempty"`

	// volume ID
	VolumeID string `json:"volumeID,omitempty"`
}

// Validate validates this config base o s config
func (m *ConfigBaseOSConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUuidandversion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBaseOSConfig) validateDrives(formats strfmt.Registry) error {
	if swag.IsZero(m.Drives) { // not required
		return nil
	}

	for i := 0; i < len(m.Drives); i++ {
		if swag.IsZero(m.Drives[i]) { // not required
			continue
		}

		if m.Drives[i] != nil {
			if err := m.Drives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBaseOSConfig) validateUuidandversion(formats strfmt.Registry) error {
	if swag.IsZero(m.Uuidandversion) { // not required
		return nil
	}

	if m.Uuidandversion != nil {
		if err := m.Uuidandversion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uuidandversion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uuidandversion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config base o s config based on the context it is used
func (m *ConfigBaseOSConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDrives(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUuidandversion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBaseOSConfig) contextValidateDrives(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Drives); i++ {

		if m.Drives[i] != nil {
			if err := m.Drives[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigBaseOSConfig) contextValidateUuidandversion(ctx context.Context, formats strfmt.Registry) error {

	if m.Uuidandversion != nil {
		if err := m.Uuidandversion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uuidandversion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uuidandversion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigBaseOSConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigBaseOSConfig) UnmarshalBinary(b []byte) error {
	var res ConfigBaseOSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
