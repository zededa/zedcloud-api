// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TagType Resource group types
//
// - TAG_TYPE_UNSPECIFIED: Unspecified
//  - TAG_TYPE_GENERIC: Generic resource group
//  - TAG_TYPE_PROJECT: Project resource group
//
// swagger:model TagType
type TagType string

func NewTagType(value TagType) *TagType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TagType.
func (m TagType) Pointer() *TagType {
	return &m
}

const (

	// TagTypeTAGTYPEUNSPECIFIED captures enum value "TAG_TYPE_UNSPECIFIED"
	TagTypeTAGTYPEUNSPECIFIED TagType = "TAG_TYPE_UNSPECIFIED"

	// TagTypeTAGTYPEGENERIC captures enum value "TAG_TYPE_GENERIC"
	TagTypeTAGTYPEGENERIC TagType = "TAG_TYPE_GENERIC"

	// TagTypeTAGTYPEPROJECT captures enum value "TAG_TYPE_PROJECT"
	TagTypeTAGTYPEPROJECT TagType = "TAG_TYPE_PROJECT"
)

// for schema
var tagTypeEnum []interface{}

func init() {
	var res []TagType
	if err := json.Unmarshal([]byte(`["TAG_TYPE_UNSPECIFIED","TAG_TYPE_GENERIC","TAG_TYPE_PROJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tagTypeEnum = append(tagTypeEnum, v)
	}
}

func (m TagType) validateTagTypeEnum(path, location string, value TagType) error {
	if err := validate.EnumCase(path, location, value, tagTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tag type
func (m TagType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTagTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tag type based on context it is used
func (m TagType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
