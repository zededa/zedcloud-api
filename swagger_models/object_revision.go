// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectRevision ObjectRevision is used to store the user information.
//
// # ObjectRevision store the user details, who has doent the necessary operation like Create Operation or update operation
//
// swagger:model ObjectRevision
type ObjectRevision struct {

	// The time, in milliseconds since the epoch, when the record was created.
	// Required: true
	CreatedAt interface{} `json:"createdAt"`

	// User data: Created By
	// Required: true
	CreatedBy *string `json:"createdBy"`

	// Current Database version of the record
	// Required: true
	Curr *string `json:"curr"`

	// Previous
	Prev string `json:"prev,omitempty"`

	// The time, in milliseconds since the epoch, when the record was last updated.
	// Required: true
	UpdatedAt interface{} `json:"updatedAt"`

	// User data: Updated By
	// Required: true
	UpdatedBy *string `json:"updatedBy"`
}

// Validate validates this object revision
func (m *ObjectRevision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectRevision) validateCreatedAt(formats strfmt.Registry) error {

	if m.CreatedAt == nil {
		return errors.Required("createdAt", "body", nil)
	}

	return nil
}

func (m *ObjectRevision) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *ObjectRevision) validateCurr(formats strfmt.Registry) error {

	if err := validate.Required("curr", "body", m.Curr); err != nil {
		return err
	}

	return nil
}

func (m *ObjectRevision) validateUpdatedAt(formats strfmt.Registry) error {

	if m.UpdatedAt == nil {
		return errors.Required("updatedAt", "body", nil)
	}

	return nil
}

func (m *ObjectRevision) validateUpdatedBy(formats strfmt.Registry) error {

	if err := validate.Required("updatedBy", "body", m.UpdatedBy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this object revision based on context it is used
func (m *ObjectRevision) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ObjectRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectRevision) UnmarshalBinary(b []byte) error {
	var res ObjectRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
