// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BulkConfig config required for bulk ops.
//
// swagger:model BulkConfig
type BulkConfig struct {

	// baseos update
	BaseosUpdate *BaseosUpdate `json:"baseosUpdate,omitempty"`

	// bundle import
	BundleImport *BundleImport `json:"bundleImport,omitempty"`

	// instance deploy
	InstanceDeploy *AppInstanceDeploy `json:"instanceDeploy,omitempty"`

	// instance refresh and purge
	InstanceRefreshAndPurge *AppInstanceRefreshAndPurge `json:"instanceRefreshAndPurge,omitempty"`

	// job Id
	JobID string `json:"jobId,omitempty"`

	// job name
	JobName string `json:"jobName,omitempty"`

	// model import
	ModelImport *ModelImport `json:"modelImport,omitempty"`

	// selection criteria
	SelectionCriteria *SelectionCriteria `json:"selectionCriteria,omitempty"`
}

// Validate validates this bulk config
func (m *BulkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseosUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleImport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceDeploy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceRefreshAndPurge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelImport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectionCriteria(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkConfig) validateBaseosUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseosUpdate) { // not required
		return nil
	}

	if m.BaseosUpdate != nil {
		if err := m.BaseosUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseosUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseosUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) validateBundleImport(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleImport) { // not required
		return nil
	}

	if m.BundleImport != nil {
		if err := m.BundleImport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundleImport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundleImport")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) validateInstanceDeploy(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceDeploy) { // not required
		return nil
	}

	if m.InstanceDeploy != nil {
		if err := m.InstanceDeploy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceDeploy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceDeploy")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) validateInstanceRefreshAndPurge(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceRefreshAndPurge) { // not required
		return nil
	}

	if m.InstanceRefreshAndPurge != nil {
		if err := m.InstanceRefreshAndPurge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceRefreshAndPurge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceRefreshAndPurge")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) validateModelImport(formats strfmt.Registry) error {
	if swag.IsZero(m.ModelImport) { // not required
		return nil
	}

	if m.ModelImport != nil {
		if err := m.ModelImport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modelImport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modelImport")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) validateSelectionCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectionCriteria) { // not required
		return nil
	}

	if m.SelectionCriteria != nil {
		if err := m.SelectionCriteria.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectionCriteria")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectionCriteria")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bulk config based on the context it is used
func (m *BulkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseosUpdate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBundleImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceDeploy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceRefreshAndPurge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModelImport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelectionCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkConfig) contextValidateBaseosUpdate(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseosUpdate != nil {
		if err := m.BaseosUpdate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseosUpdate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseosUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) contextValidateBundleImport(ctx context.Context, formats strfmt.Registry) error {

	if m.BundleImport != nil {
		if err := m.BundleImport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundleImport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundleImport")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) contextValidateInstanceDeploy(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceDeploy != nil {
		if err := m.InstanceDeploy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceDeploy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceDeploy")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) contextValidateInstanceRefreshAndPurge(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceRefreshAndPurge != nil {
		if err := m.InstanceRefreshAndPurge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceRefreshAndPurge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instanceRefreshAndPurge")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) contextValidateModelImport(ctx context.Context, formats strfmt.Registry) error {

	if m.ModelImport != nil {
		if err := m.ModelImport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modelImport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("modelImport")
			}
			return err
		}
	}

	return nil
}

func (m *BulkConfig) contextValidateSelectionCriteria(ctx context.Context, formats strfmt.Registry) error {

	if m.SelectionCriteria != nil {
		if err := m.SelectionCriteria.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectionCriteria")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectionCriteria")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkConfig) UnmarshalBinary(b []byte) error {
	var res BulkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
