// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigCellularConfig config cellular config
//
// swagger:model configCellularConfig
type ConfigCellularConfig struct {

	// APN string - by default it is "internet"
	APN string `json:"APN,omitempty"`

	// Some LTE modems have GNSS receiver integrated and can be used for device
	// location tracking.
	// Enable this option to have location info periodically obtained from this
	// modem and published to controller and to applications.
	LocationTracking bool `json:"locationTracking,omitempty"`

	// Optional cellular connectivity probing.
	// By default it is enabled.
	Probe *ConfigCellularConnectivityProbe `json:"probe,omitempty"`
}

// Validate validates this config cellular config
func (m *ConfigCellularConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProbe(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigCellularConfig) validateProbe(formats strfmt.Registry) error {
	if swag.IsZero(m.Probe) { // not required
		return nil
	}

	if m.Probe != nil {
		if err := m.Probe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("probe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("probe")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config cellular config based on the context it is used
func (m *ConfigCellularConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProbe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigCellularConfig) contextValidateProbe(ctx context.Context, formats strfmt.Registry) error {

	if m.Probe != nil {

		if swag.IsZero(m.Probe) { // not required
			return nil
		}

		if err := m.Probe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("probe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("probe")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigCellularConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigCellularConfig) UnmarshalBinary(b []byte) error {
	var res ConfigCellularConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
