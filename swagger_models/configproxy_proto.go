// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigproxyProto configproxy proto
//
// swagger:model configproxyProto
type ConfigproxyProto string

func NewConfigproxyProto(value ConfigproxyProto) *ConfigproxyProto {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigproxyProto.
func (m ConfigproxyProto) Pointer() *ConfigproxyProto {
	return &m
}

const (

	// ConfigproxyProtoPROXYHTTP captures enum value "PROXY_HTTP"
	ConfigproxyProtoPROXYHTTP ConfigproxyProto = "PROXY_HTTP"

	// ConfigproxyProtoPROXYHTTPS captures enum value "PROXY_HTTPS"
	ConfigproxyProtoPROXYHTTPS ConfigproxyProto = "PROXY_HTTPS"

	// ConfigproxyProtoPROXYSOCKS captures enum value "PROXY_SOCKS"
	ConfigproxyProtoPROXYSOCKS ConfigproxyProto = "PROXY_SOCKS"

	// ConfigproxyProtoPROXYFTP captures enum value "PROXY_FTP"
	ConfigproxyProtoPROXYFTP ConfigproxyProto = "PROXY_FTP"

	// ConfigproxyProtoPROXYOTHER captures enum value "PROXY_OTHER"
	ConfigproxyProtoPROXYOTHER ConfigproxyProto = "PROXY_OTHER"
)

// for schema
var configproxyProtoEnum []interface{}

func init() {
	var res []ConfigproxyProto
	if err := json.Unmarshal([]byte(`["PROXY_HTTP","PROXY_HTTPS","PROXY_SOCKS","PROXY_FTP","PROXY_OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configproxyProtoEnum = append(configproxyProtoEnum, v)
	}
}

func (m ConfigproxyProto) validateConfigproxyProtoEnum(path, location string, value ConfigproxyProto) error {
	if err := validate.EnumCase(path, location, value, configproxyProtoEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configproxy proto
func (m ConfigproxyProto) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigproxyProtoEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configproxy proto based on context it is used
func (m ConfigproxyProto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
