// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyDocVersionResp policy doc version resp
//
// swagger:model PolicyDocVersionResp
type PolicyDocVersionResp struct {

	// pinfo
	Pinfo *PolicyDocVersion `json:"pinfo,omitempty"`

	// plist
	Plist *PolicyDocVersionList `json:"plist,omitempty"`

	// result
	Result *ZsrvResponse `json:"result,omitempty"`
}

// Validate validates this policy doc version resp
func (m *PolicyDocVersionResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePinfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyDocVersionResp) validatePinfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Pinfo) { // not required
		return nil
	}

	if m.Pinfo != nil {
		if err := m.Pinfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pinfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pinfo")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDocVersionResp) validatePlist(formats strfmt.Registry) error {
	if swag.IsZero(m.Plist) { // not required
		return nil
	}

	if m.Plist != nil {
		if err := m.Plist.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plist")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plist")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDocVersionResp) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this policy doc version resp based on the context it is used
func (m *PolicyDocVersionResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePinfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyDocVersionResp) contextValidatePinfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Pinfo != nil {
		if err := m.Pinfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pinfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pinfo")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDocVersionResp) contextValidatePlist(ctx context.Context, formats strfmt.Registry) error {

	if m.Plist != nil {
		if err := m.Plist.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plist")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plist")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDocVersionResp) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {
		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyDocVersionResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyDocVersionResp) UnmarshalBinary(b []byte) error {
	var res PolicyDocVersionResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
