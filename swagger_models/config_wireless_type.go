// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigWirelessType config wireless type
//
// swagger:model configWirelessType
type ConfigWirelessType string

func NewConfigWirelessType(value ConfigWirelessType) *ConfigWirelessType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigWirelessType.
func (m ConfigWirelessType) Pointer() *ConfigWirelessType {
	return &m
}

const (

	// ConfigWirelessTypeTypeNOOP captures enum value "TypeNOOP"
	ConfigWirelessTypeTypeNOOP ConfigWirelessType = "TypeNOOP"

	// ConfigWirelessTypeWiFi captures enum value "WiFi"
	ConfigWirelessTypeWiFi ConfigWirelessType = "WiFi"

	// ConfigWirelessTypeCellular captures enum value "Cellular"
	ConfigWirelessTypeCellular ConfigWirelessType = "Cellular"
)

// for schema
var configWirelessTypeEnum []interface{}

func init() {
	var res []ConfigWirelessType
	if err := json.Unmarshal([]byte(`["TypeNOOP","WiFi","Cellular"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configWirelessTypeEnum = append(configWirelessTypeEnum, v)
	}
}

func (m ConfigWirelessType) validateConfigWirelessTypeEnum(path, location string, value ConfigWirelessType) error {
	if err := validate.EnumCase(path, location, value, configWirelessTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config wireless type
func (m ConfigWirelessType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigWirelessTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config wireless type based on context it is used
func (m ConfigWirelessType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
