// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigExternalEndPointPolicy External Endpoint applicable to edge-view
// To mean the entity external to the device, e.g. a local-profile server on the LAN outside of mgmt
// or app-shared ports. since it's not part of EVE, and not part of EVE applications. In the EdgeView code,
// if tcp session setup is to an address we don't have, it identifies the request as 'external'
//
// swagger:model configExternalEndPointPolicy
type ConfigExternalEndPointPolicy struct {

	// external of device side of edge-view access is allowed or not
	AllowExt bool `json:"allowExt,omitempty"`
}

// Validate validates this config external end point policy
func (m *ConfigExternalEndPointPolicy) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this config external end point policy based on context it is used
func (m *ConfigExternalEndPointPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigExternalEndPointPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigExternalEndPointPolicy) UnmarshalBinary(b []byte) error {
	var res ConfigExternalEndPointPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
