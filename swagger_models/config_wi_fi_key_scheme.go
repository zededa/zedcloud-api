// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigWiFiKeyScheme config wi fi key scheme
//
// swagger:model configWiFiKeyScheme
type ConfigWiFiKeyScheme string

func NewConfigWiFiKeyScheme(value ConfigWiFiKeyScheme) *ConfigWiFiKeyScheme {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigWiFiKeyScheme.
func (m ConfigWiFiKeyScheme) Pointer() *ConfigWiFiKeyScheme {
	return &m
}

const (

	// ConfigWiFiKeySchemeSchemeNOOP captures enum value "SchemeNOOP"
	ConfigWiFiKeySchemeSchemeNOOP ConfigWiFiKeyScheme = "SchemeNOOP"

	// ConfigWiFiKeySchemeWPAPSK captures enum value "WPAPSK"
	ConfigWiFiKeySchemeWPAPSK ConfigWiFiKeyScheme = "WPAPSK"

	// ConfigWiFiKeySchemeWPAEAP captures enum value "WPAEAP"
	ConfigWiFiKeySchemeWPAEAP ConfigWiFiKeyScheme = "WPAEAP"
)

// for schema
var configWiFiKeySchemeEnum []interface{}

func init() {
	var res []ConfigWiFiKeyScheme
	if err := json.Unmarshal([]byte(`["SchemeNOOP","WPAPSK","WPAEAP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configWiFiKeySchemeEnum = append(configWiFiKeySchemeEnum, v)
	}
}

func (m ConfigWiFiKeyScheme) validateConfigWiFiKeySchemeEnum(path, location string, value ConfigWiFiKeyScheme) error {
	if err := validate.EnumCase(path, location, value, configWiFiKeySchemeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config wi fi key scheme
func (m ConfigWiFiKeyScheme) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigWiFiKeySchemeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config wi fi key scheme based on context it is used
func (m ConfigWiFiKeyScheme) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
