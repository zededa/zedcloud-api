// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VolInstConfig vol inst config
//
// swagger:model VolInstConfig
type VolInstConfig struct {

	// accessmode
	Accessmode *VolumeInstanceAccessMode `json:"accessmode,omitempty"`

	// cleartext
	Cleartext bool `json:"cleartext,omitempty"`

	// content tree Id
	ContentTreeID string `json:"contentTreeId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// device Id
	DeviceID string `json:"deviceId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// implicit
	Implicit bool `json:"implicit,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// multiattach
	Multiattach bool `json:"multiattach,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// purge
	Purge *ZedCloudOpsCmd `json:"purge,omitempty"`

	// revision
	Revision *ObjectRevision `json:"revision,omitempty"`

	// size bytes
	SizeBytes string `json:"sizeBytes,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type *VolumeInstanceType `json:"type,omitempty"`
}

// Validate validates this vol inst config
func (m *VolInstConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessmode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolInstConfig) validateAccessmode(formats strfmt.Registry) error {
	if swag.IsZero(m.Accessmode) { // not required
		return nil
	}

	if m.Accessmode != nil {
		if err := m.Accessmode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessmode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessmode")
			}
			return err
		}
	}

	return nil
}

func (m *VolInstConfig) validatePurge(formats strfmt.Registry) error {
	if swag.IsZero(m.Purge) { // not required
		return nil
	}

	if m.Purge != nil {
		if err := m.Purge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purge")
			}
			return err
		}
	}

	return nil
}

func (m *VolInstConfig) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *VolInstConfig) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vol inst config based on the context it is used
func (m *VolInstConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessmode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePurge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolInstConfig) contextValidateAccessmode(ctx context.Context, formats strfmt.Registry) error {

	if m.Accessmode != nil {
		if err := m.Accessmode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessmode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessmode")
			}
			return err
		}
	}

	return nil
}

func (m *VolInstConfig) contextValidatePurge(ctx context.Context, formats strfmt.Registry) error {

	if m.Purge != nil {
		if err := m.Purge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purge")
			}
			return err
		}
	}

	return nil
}

func (m *VolInstConfig) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {
		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *VolInstConfig) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolInstConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolInstConfig) UnmarshalBinary(b []byte) error {
	var res VolInstConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
