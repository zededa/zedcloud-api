// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigDatastoreConfig The DataStoreConfig contains common parameters for a give source of
// images aka ContentTrees, such as the credentials and server
//
// swagger:model configDatastoreConfig
type ConfigDatastoreConfig struct {

	// to be deprecated, use cipherData instead
	APIKey string `json:"apiKey,omitempty"`

	// contains the encrypted credentials
	CipherData *ConfigCipherBlock `json:"cipherData,omitempty"`

	// d type
	DType *ConfigDsType `json:"dType,omitempty"`

	// depending on datastore types, it could be bucket or path
	Dpath string `json:"dpath,omitempty"`

	// Uploaded datastore certificate or certificate chain
	DsCertPEM []strfmt.Base64 `json:"dsCertPEM"`

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// to be deprecated, use cipherData instead
	Password string `json:"password,omitempty"`

	// Applies for some datastore types
	Region string `json:"region,omitempty"`
}

// Validate validates this config datastore config
func (m *ConfigDatastoreConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCipherData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigDatastoreConfig) validateCipherData(formats strfmt.Registry) error {
	if swag.IsZero(m.CipherData) { // not required
		return nil
	}

	if m.CipherData != nil {
		if err := m.CipherData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cipherData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cipherData")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigDatastoreConfig) validateDType(formats strfmt.Registry) error {
	if swag.IsZero(m.DType) { // not required
		return nil
	}

	if m.DType != nil {
		if err := m.DType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config datastore config based on the context it is used
func (m *ConfigDatastoreConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCipherData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigDatastoreConfig) contextValidateCipherData(ctx context.Context, formats strfmt.Registry) error {

	if m.CipherData != nil {
		if err := m.CipherData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cipherData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cipherData")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigDatastoreConfig) contextValidateDType(ctx context.Context, formats strfmt.Registry) error {

	if m.DType != nil {
		if err := m.DType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigDatastoreConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigDatastoreConfig) UnmarshalBinary(b []byte) error {
	var res ConfigDatastoreConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
