// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigDisksArrayType DisksArrayType is the desired configuration of disks in DisksConfig
//
// swagger:model configDisksArrayType
type ConfigDisksArrayType string

func NewConfigDisksArrayType(value ConfigDisksArrayType) *ConfigDisksArrayType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigDisksArrayType.
func (m ConfigDisksArrayType) Pointer() *ConfigDisksArrayType {
	return &m
}

const (

	// ConfigDisksArrayTypeDISKSARRAYTYPEUNSPECIFIED captures enum value "DISKS_ARRAY_TYPE_UNSPECIFIED"
	ConfigDisksArrayTypeDISKSARRAYTYPEUNSPECIFIED ConfigDisksArrayType = "DISKS_ARRAY_TYPE_UNSPECIFIED"

	// ConfigDisksArrayTypeDISKSARRAYTYPERAID0 captures enum value "DISKS_ARRAY_TYPE_RAID0"
	ConfigDisksArrayTypeDISKSARRAYTYPERAID0 ConfigDisksArrayType = "DISKS_ARRAY_TYPE_RAID0"

	// ConfigDisksArrayTypeDISKSARRAYTYPERAID1 captures enum value "DISKS_ARRAY_TYPE_RAID1"
	ConfigDisksArrayTypeDISKSARRAYTYPERAID1 ConfigDisksArrayType = "DISKS_ARRAY_TYPE_RAID1"

	// ConfigDisksArrayTypeDISKSARRAYTYPERAID5 captures enum value "DISKS_ARRAY_TYPE_RAID5"
	ConfigDisksArrayTypeDISKSARRAYTYPERAID5 ConfigDisksArrayType = "DISKS_ARRAY_TYPE_RAID5"

	// ConfigDisksArrayTypeDISKSARRAYTYPERAID6 captures enum value "DISKS_ARRAY_TYPE_RAID6"
	ConfigDisksArrayTypeDISKSARRAYTYPERAID6 ConfigDisksArrayType = "DISKS_ARRAY_TYPE_RAID6"
)

// for schema
var configDisksArrayTypeEnum []interface{}

func init() {
	var res []ConfigDisksArrayType
	if err := json.Unmarshal([]byte(`["DISKS_ARRAY_TYPE_UNSPECIFIED","DISKS_ARRAY_TYPE_RAID0","DISKS_ARRAY_TYPE_RAID1","DISKS_ARRAY_TYPE_RAID5","DISKS_ARRAY_TYPE_RAID6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configDisksArrayTypeEnum = append(configDisksArrayTypeEnum, v)
	}
}

func (m ConfigDisksArrayType) validateConfigDisksArrayTypeEnum(path, location string, value ConfigDisksArrayType) error {
	if err := validate.EnumCase(path, location, value, configDisksArrayTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config disks array type
func (m ConfigDisksArrayType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigDisksArrayTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config disks array type based on context it is used
func (m ConfigDisksArrayType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
