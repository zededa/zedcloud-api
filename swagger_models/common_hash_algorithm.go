// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonHashAlgorithm common hash algorithm
//
// swagger:model commonHashAlgorithm
type CommonHashAlgorithm string

func NewCommonHashAlgorithm(value CommonHashAlgorithm) *CommonHashAlgorithm {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonHashAlgorithm.
func (m CommonHashAlgorithm) Pointer() *CommonHashAlgorithm {
	return &m
}

const (

	// CommonHashAlgorithmHASHALGORITHMINVALID captures enum value "HASH_ALGORITHM_INVALID"
	CommonHashAlgorithmHASHALGORITHMINVALID CommonHashAlgorithm = "HASH_ALGORITHM_INVALID"

	// CommonHashAlgorithmHASHALGORITHMSHA25616BYTES captures enum value "HASH_ALGORITHM_SHA256_16BYTES"
	CommonHashAlgorithmHASHALGORITHMSHA25616BYTES CommonHashAlgorithm = "HASH_ALGORITHM_SHA256_16BYTES"

	// CommonHashAlgorithmHASHALGORITHMSHA25632BYTES captures enum value "HASH_ALGORITHM_SHA256_32BYTES"
	CommonHashAlgorithmHASHALGORITHMSHA25632BYTES CommonHashAlgorithm = "HASH_ALGORITHM_SHA256_32BYTES"
)

// for schema
var commonHashAlgorithmEnum []interface{}

func init() {
	var res []CommonHashAlgorithm
	if err := json.Unmarshal([]byte(`["HASH_ALGORITHM_INVALID","HASH_ALGORITHM_SHA256_16BYTES","HASH_ALGORITHM_SHA256_32BYTES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonHashAlgorithmEnum = append(commonHashAlgorithmEnum, v)
	}
}

func (m CommonHashAlgorithm) validateCommonHashAlgorithmEnum(path, location string, value CommonHashAlgorithm) error {
	if err := validate.EnumCase(path, location, value, commonHashAlgorithmEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common hash algorithm
func (m CommonHashAlgorithm) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonHashAlgorithmEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common hash algorithm based on context it is used
func (m CommonHashAlgorithm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
