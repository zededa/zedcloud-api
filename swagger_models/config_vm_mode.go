// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigVMMode For now we need to tell the device which virtualization mode
// to use. Later we might use a single one for all VMs (on any particular
// ISA). If we end up keeping this we should make the names be less
// tied to a particular hypervisor.
//
// swagger:model configVmMode
type ConfigVMMode string

func NewConfigVMMode(value ConfigVMMode) *ConfigVMMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigVMMode.
func (m ConfigVMMode) Pointer() *ConfigVMMode {
	return &m
}

const (

	// ConfigVMModePV captures enum value "PV"
	ConfigVMModePV ConfigVMMode = "PV"

	// ConfigVMModeHVM captures enum value "HVM"
	ConfigVMModeHVM ConfigVMMode = "HVM"

	// ConfigVMModeFiller captures enum value "Filler"
	ConfigVMModeFiller ConfigVMMode = "Filler"

	// ConfigVMModeFML captures enum value "FML"
	ConfigVMModeFML ConfigVMMode = "FML"

	// ConfigVMModeNOHYPER captures enum value "NOHYPER"
	ConfigVMModeNOHYPER ConfigVMMode = "NOHYPER"

	// ConfigVMModeLEGACY captures enum value "LEGACY"
	ConfigVMModeLEGACY ConfigVMMode = "LEGACY"
)

// for schema
var configVmModeEnum []interface{}

func init() {
	var res []ConfigVMMode
	if err := json.Unmarshal([]byte(`["PV","HVM","Filler","FML","NOHYPER","LEGACY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configVmModeEnum = append(configVmModeEnum, v)
	}
}

func (m ConfigVMMode) validateConfigVMModeEnum(path, location string, value ConfigVMMode) error {
	if err := validate.EnumCase(path, location, value, configVmModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config Vm mode
func (m ConfigVMMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigVMModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config Vm mode based on context it is used
func (m ConfigVMMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
