// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZsrvError zsrv error
//
// swagger:model ZsrvError
type ZsrvError struct {

	// Field captures string description of details
	Details string `json:"details,omitempty"`

	// Enumrated error code, describes more granular numerical
	// value than just httpStatus
	Ec *ZsrvErrorCode `json:"ec,omitempty"`

	// Ignore: Internal field only
	Location string `json:"location,omitempty"`
}

// Validate validates this zsrv error
func (m *ZsrvError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZsrvError) validateEc(formats strfmt.Registry) error {
	if swag.IsZero(m.Ec) { // not required
		return nil
	}

	if m.Ec != nil {
		if err := m.Ec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zsrv error based on the context it is used
func (m *ZsrvError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZsrvError) contextValidateEc(ctx context.Context, formats strfmt.Registry) error {

	if m.Ec != nil {
		if err := m.Ec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZsrvError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZsrvError) UnmarshalBinary(b []byte) error {
	var res ZsrvError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
