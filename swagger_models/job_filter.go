// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobFilter Job list filter criteria
//
// Filter criteria for the job list.
//
// swagger:model JobFilter
type JobFilter struct {

	// status of the job.
	JobStatus *JobStatus `json:"jobStatus,omitempty"`

	// name pattern of the job.
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	NamePattern string `json:"namePattern,omitempty"`

	// project name.
	ProjectName string `json:"projectName,omitempty"`
}

// Validate validates this job filter
func (m *JobFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamePattern(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobFilter) validateJobStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.JobStatus) { // not required
		return nil
	}

	if m.JobStatus != nil {
		if err := m.JobStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobStatus")
			}
			return err
		}
	}

	return nil
}

func (m *JobFilter) validateNamePattern(formats strfmt.Registry) error {
	if swag.IsZero(m.NamePattern) { // not required
		return nil
	}

	if err := validate.Pattern("namePattern", "body", m.NamePattern, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this job filter based on the context it is used
func (m *JobFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobFilter) contextValidateJobStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.JobStatus != nil {
		if err := m.JobStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jobStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobFilter) UnmarshalBinary(b []byte) error {
	var res JobFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
