// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobConfig config required for job ops
//
// config required for job ops
// Example: {"id":"d85a545f-6510-4327-b03d-c02eef119e99","name":"sample-job","objectType":"OBJECT_TYPE_EDGE_NODE"}
//
// swagger:model JobConfig
type JobConfig struct {

	// user or system specified description
	Description string `json:"description,omitempty"`

	// detailed error with which job/task has failed
	// Read Only: true
	ErrorDetailOfJob string `json:"errorDetailOfJob,omitempty"`

	// finish time of the job
	// Read Only: true
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// System defined universally unique Id of the job request
	// Read Only: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
	ID string `json:"id,omitempty"`

	// individual op status
	IndividualOpStatus map[string]string `json:"individualOpStatus,omitempty"`

	// User defined name of the job request, unique across the enterprise. Once object is created, name canâ€™t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// object list
	ObjectList []string `json:"objectList"`

	// object type for which job has been created
	// Required: true
	ObjectType *ObjectType `json:"objectType"`

	// operation type
	OperationType *BulkService `json:"operationType,omitempty"`

	// project Id in which job is getting created
	ProjectID string `json:"projectId,omitempty"`

	// system defined info
	// Read Only: true
	Revision *ObjectRevision `json:"revision,omitempty"`

	// selection criteria for the job
	// Read Only: true
	SelectionCriteria *SelectionCriteria `json:"selectionCriteria,omitempty"`

	// start time of the job
	// Read Only: true
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// status of the job
	// Read Only: true
	Status *JobStatus `json:"status,omitempty"`

	// user or system specified title
	Title string `json:"title,omitempty"`
}

// Validate validates this job config
func (m *JobConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectionCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobConfig) validateFinishTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}`); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) validateObjectType(formats strfmt.Registry) error {

	if err := validate.Required("objectType", "body", m.ObjectType); err != nil {
		return err
	}

	if err := validate.Required("objectType", "body", m.ObjectType); err != nil {
		return err
	}

	if m.ObjectType != nil {
		if err := m.ObjectType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) validateOperationType(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationType) { // not required
		return nil
	}

	if m.OperationType != nil {
		if err := m.OperationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationType")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) validateSelectionCriteria(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectionCriteria) { // not required
		return nil
	}

	if m.SelectionCriteria != nil {
		if err := m.SelectionCriteria.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectionCriteria")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectionCriteria")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this job config based on the context it is used
func (m *JobConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorDetailOfJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinishTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelectionCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobConfig) contextValidateErrorDetailOfJob(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "errorDetailOfJob", "body", string(m.ErrorDetailOfJob)); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) contextValidateFinishTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "finishTime", "body", strfmt.DateTime(m.FinishTime)); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) contextValidateObjectType(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectType != nil {
		if err := m.ObjectType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) contextValidateOperationType(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationType != nil {
		if err := m.OperationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationType")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {
		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) contextValidateSelectionCriteria(ctx context.Context, formats strfmt.Registry) error {

	if m.SelectionCriteria != nil {
		if err := m.SelectionCriteria.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selectionCriteria")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selectionCriteria")
			}
			return err
		}
	}

	return nil
}

func (m *JobConfig) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "startTime", "body", strfmt.DateTime(m.StartTime)); err != nil {
		return err
	}

	return nil
}

func (m *JobConfig) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobConfig) UnmarshalBinary(b []byte) error {
	var res JobConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
