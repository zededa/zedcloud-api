// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigWirelessConfig config wireless config
//
// swagger:model configWirelessConfig
type ConfigWirelessConfig struct {

	// cellular cfg
	CellularCfg []*ConfigCellularConfig `json:"cellularCfg"`

	// type
	Type *ConfigWirelessType `json:"type,omitempty"`

	// wifi cfg
	WifiCfg []*ConfigWifiConfig `json:"wifiCfg"`
}

// Validate validates this config wireless config
func (m *ConfigWirelessConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCellularCfg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWifiCfg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigWirelessConfig) validateCellularCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.CellularCfg) { // not required
		return nil
	}

	for i := 0; i < len(m.CellularCfg); i++ {
		if swag.IsZero(m.CellularCfg[i]) { // not required
			continue
		}

		if m.CellularCfg[i] != nil {
			if err := m.CellularCfg[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cellularCfg" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cellularCfg" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigWirelessConfig) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigWirelessConfig) validateWifiCfg(formats strfmt.Registry) error {
	if swag.IsZero(m.WifiCfg) { // not required
		return nil
	}

	for i := 0; i < len(m.WifiCfg); i++ {
		if swag.IsZero(m.WifiCfg[i]) { // not required
			continue
		}

		if m.WifiCfg[i] != nil {
			if err := m.WifiCfg[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wifiCfg" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("wifiCfg" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this config wireless config based on the context it is used
func (m *ConfigWirelessConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCellularCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWifiCfg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigWirelessConfig) contextValidateCellularCfg(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CellularCfg); i++ {

		if m.CellularCfg[i] != nil {
			if err := m.CellularCfg[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cellularCfg" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cellularCfg" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigWirelessConfig) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigWirelessConfig) contextValidateWifiCfg(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WifiCfg); i++ {

		if m.WifiCfg[i] != nil {
			if err := m.WifiCfg[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wifiCfg" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("wifiCfg" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigWirelessConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigWirelessConfig) UnmarshalBinary(b []byte) error {
	var res ConfigWirelessConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
