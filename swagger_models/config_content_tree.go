// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigContentTree ContentTree describes the top of some content tree. The controller needs
// to allocate a uuid for it, and that uuid will be sent by EVE in the
// ZInfoContentTree message
//
// swagger:model configContentTree
type ConfigContentTree struct {

	// URL
	URL string `json:"URL,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// ds Id
	DsID string `json:"dsId,omitempty"`

	// For container ContentTree, sha256 might not be available in config.
	// If the sha256 is not available then it needs to be resolved corresponding to the tag
	// change in generation_count indicates that the resolution of tag is needed
	// generation_count needs to be updated when purge is required for an existing
	// instance. In case of new instance using the same content tree, EVE will get
	// new content tree UUID in the device configuration from the controller.
	GenerationCount string `json:"generation_count,omitempty"`

	// iformat
	Iformat *ConfigFormat `json:"iformat,omitempty"`

	// maxSizeBytes used for capping resource consumption in EVE.
	// maxSizeBytes indicates the maximum download size of content tree.
	MaxSizeBytes string `json:"maxSizeBytes,omitempty"`

	// The sha is for the top blob of the ContentTree
	Sha256 string `json:"sha256,omitempty"`

	// siginfo
	Siginfo *ConfigSignatureInfo `json:"siginfo,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this config content tree
func (m *ConfigContentTree) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIformat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiginfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigContentTree) validateIformat(formats strfmt.Registry) error {
	if swag.IsZero(m.Iformat) { // not required
		return nil
	}

	if m.Iformat != nil {
		if err := m.Iformat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iformat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iformat")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigContentTree) validateSiginfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Siginfo) { // not required
		return nil
	}

	if m.Siginfo != nil {
		if err := m.Siginfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siginfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siginfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config content tree based on the context it is used
func (m *ConfigContentTree) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIformat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSiginfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigContentTree) contextValidateIformat(ctx context.Context, formats strfmt.Registry) error {

	if m.Iformat != nil {
		if err := m.Iformat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iformat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iformat")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigContentTree) contextValidateSiginfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Siginfo != nil {
		if err := m.Siginfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("siginfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("siginfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigContentTree) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigContentTree) UnmarshalBinary(b []byte) error {
	var res ConfigContentTree
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
