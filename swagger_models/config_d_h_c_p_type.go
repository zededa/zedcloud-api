// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigDHCPType - Static: Statically configure the DHCP for port
//  - DHCPNone: Don't run any DHCP, we are in passthrough mode for app
//  - Client: Run the DHCP client on this port
//
// swagger:model configDHCPType
type ConfigDHCPType string

func NewConfigDHCPType(value ConfigDHCPType) *ConfigDHCPType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigDHCPType.
func (m ConfigDHCPType) Pointer() *ConfigDHCPType {
	return &m
}

const (

	// ConfigDHCPTypeDHCPNoop captures enum value "DHCPNoop"
	ConfigDHCPTypeDHCPNoop ConfigDHCPType = "DHCPNoop"

	// ConfigDHCPTypeStatic captures enum value "Static"
	ConfigDHCPTypeStatic ConfigDHCPType = "Static"

	// ConfigDHCPTypeDHCPNone captures enum value "DHCPNone"
	ConfigDHCPTypeDHCPNone ConfigDHCPType = "DHCPNone"

	// ConfigDHCPTypeClient captures enum value "Client"
	ConfigDHCPTypeClient ConfigDHCPType = "Client"
)

// for schema
var configDHCPTypeEnum []interface{}

func init() {
	var res []ConfigDHCPType
	if err := json.Unmarshal([]byte(`["DHCPNoop","Static","DHCPNone","Client"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configDHCPTypeEnum = append(configDHCPTypeEnum, v)
	}
}

func (m ConfigDHCPType) validateConfigDHCPTypeEnum(path, location string, value ConfigDHCPType) error {
	if err := validate.EnumCase(path, location, value, configDHCPTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config d h c p type
func (m ConfigDHCPType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigDHCPTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config d h c p type based on context it is used
func (m ConfigDHCPType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
