// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigZcServiceType - mapServer: mapping service for zededa overlay service
//  - supportServer: if device has support feature enabled, this is cloud service from
// device can be reached
//
// swagger:model configZcServiceType
type ConfigZcServiceType string

func NewConfigZcServiceType(value ConfigZcServiceType) *ConfigZcServiceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigZcServiceType.
func (m ConfigZcServiceType) Pointer() *ConfigZcServiceType {
	return &m
}

const (

	// ConfigZcServiceTypeZcloudInvalidSrv captures enum value "zcloudInvalidSrv"
	ConfigZcServiceTypeZcloudInvalidSrv ConfigZcServiceType = "zcloudInvalidSrv"

	// ConfigZcServiceTypeMapServer captures enum value "mapServer"
	ConfigZcServiceTypeMapServer ConfigZcServiceType = "mapServer"

	// ConfigZcServiceTypeSupportServer captures enum value "supportServer"
	ConfigZcServiceTypeSupportServer ConfigZcServiceType = "supportServer"
)

// for schema
var configZcServiceTypeEnum []interface{}

func init() {
	var res []ConfigZcServiceType
	if err := json.Unmarshal([]byte(`["zcloudInvalidSrv","mapServer","supportServer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configZcServiceTypeEnum = append(configZcServiceTypeEnum, v)
	}
}

func (m ConfigZcServiceType) validateConfigZcServiceTypeEnum(path, location string, value ConfigZcServiceType) error {
	if err := validate.EnumCase(path, location, value, configZcServiceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config zc service type
func (m ConfigZcServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigZcServiceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config zc service type based on context it is used
func (m ConfigZcServiceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
