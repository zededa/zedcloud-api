// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigMetaDataType Type of cloud-init data to provide to application
//
// swagger:model configMetaDataType
type ConfigMetaDataType string

func NewConfigMetaDataType(value ConfigMetaDataType) *ConfigMetaDataType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigMetaDataType.
func (m ConfigMetaDataType) Pointer() *ConfigMetaDataType {
	return &m
}

const (

	// ConfigMetaDataTypeMetaDataDrive captures enum value "MetaDataDrive"
	ConfigMetaDataTypeMetaDataDrive ConfigMetaDataType = "MetaDataDrive"

	// ConfigMetaDataTypeMetaDataNone captures enum value "MetaDataNone"
	ConfigMetaDataTypeMetaDataNone ConfigMetaDataType = "MetaDataNone"

	// ConfigMetaDataTypeMetaDataOpenStack captures enum value "MetaDataOpenStack"
	ConfigMetaDataTypeMetaDataOpenStack ConfigMetaDataType = "MetaDataOpenStack"

	// ConfigMetaDataTypeMetaDataDriveMultipart captures enum value "MetaDataDriveMultipart"
	ConfigMetaDataTypeMetaDataDriveMultipart ConfigMetaDataType = "MetaDataDriveMultipart"
)

// for schema
var configMetaDataTypeEnum []interface{}

func init() {
	var res []ConfigMetaDataType
	if err := json.Unmarshal([]byte(`["MetaDataDrive","MetaDataNone","MetaDataOpenStack","MetaDataDriveMultipart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configMetaDataTypeEnum = append(configMetaDataTypeEnum, v)
	}
}

func (m ConfigMetaDataType) validateConfigMetaDataTypeEnum(path, location string, value ConfigMetaDataType) error {
	if err := validate.EnumCase(path, location, value, configMetaDataTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config meta data type
func (m ConfigMetaDataType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigMetaDataTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config meta data type based on context it is used
func (m ConfigMetaDataType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
