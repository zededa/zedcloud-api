// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigNetworkInstanceLispConfig Lisp NetworkInstance config
//
// swagger:model configNetworkInstanceLispConfig
type ConfigNetworkInstanceLispConfig struct {

	// lisp instance Id
	LispInstanceID int64 `json:"LispInstanceId,omitempty"`

	// lisp m ss
	LispMSs []*ConfigZcServicePoint `json:"LispMSs"`

	// allocate
	Allocate bool `json:"allocate,omitempty"`

	// allocationprefix
	// Format: byte
	Allocationprefix strfmt.Base64 `json:"allocationprefix,omitempty"`

	// allocationprefixlen
	Allocationprefixlen int64 `json:"allocationprefixlen,omitempty"`

	// various configuration to dataPlane, lispers.net vs Zededa
	Experimental bool `json:"experimental,omitempty"`

	// exportprivate
	Exportprivate bool `json:"exportprivate,omitempty"`
}

// Validate validates this config network instance lisp config
func (m *ConfigNetworkInstanceLispConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLispMSs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigNetworkInstanceLispConfig) validateLispMSs(formats strfmt.Registry) error {
	if swag.IsZero(m.LispMSs) { // not required
		return nil
	}

	for i := 0; i < len(m.LispMSs); i++ {
		if swag.IsZero(m.LispMSs[i]) { // not required
			continue
		}

		if m.LispMSs[i] != nil {
			if err := m.LispMSs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LispMSs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("LispMSs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this config network instance lisp config based on the context it is used
func (m *ConfigNetworkInstanceLispConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLispMSs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigNetworkInstanceLispConfig) contextValidateLispMSs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LispMSs); i++ {

		if m.LispMSs[i] != nil {
			if err := m.LispMSs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LispMSs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("LispMSs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigNetworkInstanceLispConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigNetworkInstanceLispConfig) UnmarshalBinary(b []byte) error {
	var res ConfigNetworkInstanceLispConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
