// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceProjectAndTargetUpdate project id required for the devices
//
// project id  will be required to move the device to a new project
//
// swagger:model DeviceProjectAndTargetUpdate
type DeviceProjectAndTargetUpdate struct {

	// deployment tag to be updated on the device
	// Read Only: true
	DeploymentTag string `json:"deploymentTag,omitempty"`

	// Set this flag to override given tags over existing tags. Otherwise the tags will be merged/appended
	Override bool `json:"override,omitempty"`

	// project id.
	// Required: true
	ProjectID *string `json:"projectId"`

	// tag to be updated on the device
	// Read Only: true
	Tags map[string]string `json:"tags,omitempty"`
}

// Validate validates this device project and target update
func (m *DeviceProjectAndTargetUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceProjectAndTargetUpdate) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this device project and target update based on the context it is used
func (m *DeviceProjectAndTargetUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeploymentTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceProjectAndTargetUpdate) contextValidateDeploymentTag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deploymentTag", "body", string(m.DeploymentTag)); err != nil {
		return err
	}

	return nil
}

func (m *DeviceProjectAndTargetUpdate) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceProjectAndTargetUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceProjectAndTargetUpdate) UnmarshalBinary(b []byte) error {
	var res DeviceProjectAndTargetUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
