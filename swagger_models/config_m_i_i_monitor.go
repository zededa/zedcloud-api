// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigMIIMonitor MIIMonitor : MII link monitoring parameters.
// Defined for BondAdapter.
//
// swagger:model configMIIMonitor
type ConfigMIIMonitor struct {

	// Specifies the time, in milliseconds, to wait before disabling a bond
	// slave after a link failure has been detected.
	// The downdelay value should be a multiple of the monitoring interval; if not,
	// it will be rounded down to the nearest multiple.
	// The default value is 0.
	Downdelay int64 `json:"downdelay,omitempty"`

	// Specifies the MII link monitoring frequency in milliseconds.
	// This determines how often the link state of each bond slave is inspected
	// for link failures.
	Interval int64 `json:"interval,omitempty"`

	// Updelay specifies the time, in milliseconds, to wait before enabling
	// a bond slave after a link recovery has been detected.
	// The updelay value should be a multiple of the monitoring interval; if not,
	// it will be rounded down to the nearest multiple.
	// The default value is 0.
	Updelay int64 `json:"updelay,omitempty"`
}

// Validate validates this config m i i monitor
func (m *ConfigMIIMonitor) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this config m i i monitor based on context it is used
func (m *ConfigMIIMonitor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigMIIMonitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigMIIMonitor) UnmarshalBinary(b []byte) error {
	var res ConfigMIIMonitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
