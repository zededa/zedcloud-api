// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package swagger_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigDriveType XXX the DriveType will be deprecated when we deprecate Drive
//
// - HDD_EMPTY: this type is allocate the empty disk of maxsizebytes specified
//
// swagger:model configDriveType
type ConfigDriveType string

func NewConfigDriveType(value ConfigDriveType) *ConfigDriveType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigDriveType.
func (m ConfigDriveType) Pointer() *ConfigDriveType {
	return &m
}

const (

	// ConfigDriveTypeUnclassified captures enum value "Unclassified"
	ConfigDriveTypeUnclassified ConfigDriveType = "Unclassified"

	// ConfigDriveTypeCDROM captures enum value "CDROM"
	ConfigDriveTypeCDROM ConfigDriveType = "CDROM"

	// ConfigDriveTypeHDD captures enum value "HDD"
	ConfigDriveTypeHDD ConfigDriveType = "HDD"

	// ConfigDriveTypeNET captures enum value "NET"
	ConfigDriveTypeNET ConfigDriveType = "NET"

	// ConfigDriveTypeHDDEMPTY captures enum value "HDD_EMPTY"
	ConfigDriveTypeHDDEMPTY ConfigDriveType = "HDD_EMPTY"
)

// for schema
var configDriveTypeEnum []interface{}

func init() {
	var res []ConfigDriveType
	if err := json.Unmarshal([]byte(`["Unclassified","CDROM","HDD","NET","HDD_EMPTY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configDriveTypeEnum = append(configDriveTypeEnum, v)
	}
}

func (m ConfigDriveType) validateConfigDriveTypeEnum(path, location string, value ConfigDriveType) error {
	if err := validate.EnumCase(path, location, value, configDriveTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config drive type
func (m ConfigDriveType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigDriveTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config drive type based on context it is used
func (m ConfigDriveType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
