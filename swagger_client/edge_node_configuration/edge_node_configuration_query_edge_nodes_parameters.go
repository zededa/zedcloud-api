// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEdgeNodeConfigurationQueryEdgeNodesParams creates a new EdgeNodeConfigurationQueryEdgeNodesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEdgeNodeConfigurationQueryEdgeNodesParams() *EdgeNodeConfigurationQueryEdgeNodesParams {
	return &EdgeNodeConfigurationQueryEdgeNodesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEdgeNodeConfigurationQueryEdgeNodesParamsWithTimeout creates a new EdgeNodeConfigurationQueryEdgeNodesParams object
// with the ability to set a timeout on a request.
func NewEdgeNodeConfigurationQueryEdgeNodesParamsWithTimeout(timeout time.Duration) *EdgeNodeConfigurationQueryEdgeNodesParams {
	return &EdgeNodeConfigurationQueryEdgeNodesParams{
		timeout: timeout,
	}
}

// NewEdgeNodeConfigurationQueryEdgeNodesParamsWithContext creates a new EdgeNodeConfigurationQueryEdgeNodesParams object
// with the ability to set a context for a request.
func NewEdgeNodeConfigurationQueryEdgeNodesParamsWithContext(ctx context.Context) *EdgeNodeConfigurationQueryEdgeNodesParams {
	return &EdgeNodeConfigurationQueryEdgeNodesParams{
		Context: ctx,
	}
}

// NewEdgeNodeConfigurationQueryEdgeNodesParamsWithHTTPClient creates a new EdgeNodeConfigurationQueryEdgeNodesParams object
// with the ability to set a custom HTTPClient for a request.
func NewEdgeNodeConfigurationQueryEdgeNodesParamsWithHTTPClient(client *http.Client) *EdgeNodeConfigurationQueryEdgeNodesParams {
	return &EdgeNodeConfigurationQueryEdgeNodesParams{
		HTTPClient: client,
	}
}

/* EdgeNodeConfigurationQueryEdgeNodesParams contains all the parameters to send to the API endpoint
   for the edge node configuration query edge nodes operation.

   Typically these are written to a http.Request.
*/
type EdgeNodeConfigurationQueryEdgeNodesParams struct {

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	/* Fields.

	   Fields to select: id, name, title, description, tags, utype, projectId, serialno, adminState, modelId, clusterID, baseImage, interfaces, debugKnob
	*/
	Fields []string

	/* Summary.

	   Summary flag
	*/
	Summary *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the edge node configuration query edge nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WithDefaults() *EdgeNodeConfigurationQueryEdgeNodesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the edge node configuration query edge nodes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WithTimeout(timeout time.Duration) *EdgeNodeConfigurationQueryEdgeNodesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WithContext(ctx context.Context) *EdgeNodeConfigurationQueryEdgeNodesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WithHTTPClient(client *http.Client) *EdgeNodeConfigurationQueryEdgeNodesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WithXRequestID(xRequestID *string) *EdgeNodeConfigurationQueryEdgeNodesParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithFields adds the fields to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WithFields(fields []string) *EdgeNodeConfigurationQueryEdgeNodesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithSummary adds the summary to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WithSummary(summary *bool) *EdgeNodeConfigurationQueryEdgeNodesParams {
	o.SetSummary(summary)
	return o
}

// SetSummary adds the summary to the edge node configuration query edge nodes params
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) SetSummary(summary *bool) {
	o.Summary = summary
}

// WriteToRequest writes these params to a swagger request
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.Summary != nil {

		// query param summary
		var qrSummary bool

		if o.Summary != nil {
			qrSummary = *o.Summary
		}
		qSummary := swag.FormatBool(qrSummary)
		if qSummary != "" {

			if err := r.SetQueryParam("summary", qSummary); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEdgeNodeConfigurationQueryEdgeNodes binds the parameter fields
func (o *EdgeNodeConfigurationQueryEdgeNodesParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}
