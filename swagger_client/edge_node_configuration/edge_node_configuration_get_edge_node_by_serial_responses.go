// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// EdgeNodeConfigurationGetEdgeNodeBySerialReader is a Reader for the EdgeNodeConfigurationGetEdgeNodeBySerial structure.
type EdgeNodeConfigurationGetEdgeNodeBySerialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEdgeNodeConfigurationGetEdgeNodeBySerialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEdgeNodeConfigurationGetEdgeNodeBySerialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEdgeNodeConfigurationGetEdgeNodeBySerialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewEdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewEdgeNodeConfigurationGetEdgeNodeBySerialDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEdgeNodeConfigurationGetEdgeNodeBySerialOK creates a EdgeNodeConfigurationGetEdgeNodeBySerialOK with default headers values
func NewEdgeNodeConfigurationGetEdgeNodeBySerialOK() *EdgeNodeConfigurationGetEdgeNodeBySerialOK {
	return &EdgeNodeConfigurationGetEdgeNodeBySerialOK{}
}

/* EdgeNodeConfigurationGetEdgeNodeBySerialOK describes a response with status code 200, with default header values.

A successful response.
*/
type EdgeNodeConfigurationGetEdgeNodeBySerialOK struct {
	Payload *swagger_models.DeviceConfig
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialOK) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] edgeNodeConfigurationGetEdgeNodeBySerialOK  %+v", 200, o.Payload)
}
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialOK) GetPayload() *swagger_models.DeviceConfig {
	return o.Payload
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.DeviceConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized creates a EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized with default headers values
func NewEdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized() *EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized {
	return &EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized{}
}

/* EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] edgeNodeConfigurationGetEdgeNodeBySerialUnauthorized  %+v", 401, o.Payload)
}
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeConfigurationGetEdgeNodeBySerialForbidden creates a EdgeNodeConfigurationGetEdgeNodeBySerialForbidden with default headers values
func NewEdgeNodeConfigurationGetEdgeNodeBySerialForbidden() *EdgeNodeConfigurationGetEdgeNodeBySerialForbidden {
	return &EdgeNodeConfigurationGetEdgeNodeBySerialForbidden{}
}

/* EdgeNodeConfigurationGetEdgeNodeBySerialForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type EdgeNodeConfigurationGetEdgeNodeBySerialForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] edgeNodeConfigurationGetEdgeNodeBySerialForbidden  %+v", 403, o.Payload)
}
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeConfigurationGetEdgeNodeBySerialNotFound creates a EdgeNodeConfigurationGetEdgeNodeBySerialNotFound with default headers values
func NewEdgeNodeConfigurationGetEdgeNodeBySerialNotFound() *EdgeNodeConfigurationGetEdgeNodeBySerialNotFound {
	return &EdgeNodeConfigurationGetEdgeNodeBySerialNotFound{}
}

/* EdgeNodeConfigurationGetEdgeNodeBySerialNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type EdgeNodeConfigurationGetEdgeNodeBySerialNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] edgeNodeConfigurationGetEdgeNodeBySerialNotFound  %+v", 404, o.Payload)
}
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError creates a EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError with default headers values
func NewEdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError() *EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError {
	return &EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError{}
}

/* EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] edgeNodeConfigurationGetEdgeNodeBySerialInternalServerError  %+v", 500, o.Payload)
}
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout creates a EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout with default headers values
func NewEdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout() *EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout {
	return &EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout{}
}

/* EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] edgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout  %+v", 504, o.Payload)
}
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeConfigurationGetEdgeNodeBySerialDefault creates a EdgeNodeConfigurationGetEdgeNodeBySerialDefault with default headers values
func NewEdgeNodeConfigurationGetEdgeNodeBySerialDefault(code int) *EdgeNodeConfigurationGetEdgeNodeBySerialDefault {
	return &EdgeNodeConfigurationGetEdgeNodeBySerialDefault{
		_statusCode: code,
	}
}

/* EdgeNodeConfigurationGetEdgeNodeBySerialDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type EdgeNodeConfigurationGetEdgeNodeBySerialDefault struct {
	_statusCode int

	Payload *swagger_models.GooglerpcStatus
}

// Code gets the status code for the edge node configuration get edge node by serial default response
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialDefault) Code() int {
	return o._statusCode
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialDefault) Error() string {
	return fmt.Sprintf("[GET /v1/devices/serial/{serialno}][%d] EdgeNodeConfiguration_GetEdgeNodeBySerial default  %+v", o._statusCode, o.Payload)
}
func (o *EdgeNodeConfigurationGetEdgeNodeBySerialDefault) GetPayload() *swagger_models.GooglerpcStatus {
	return o.Payload
}

func (o *EdgeNodeConfigurationGetEdgeNodeBySerialDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
