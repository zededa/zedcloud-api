// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package cloud_diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud diagnostics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud diagnostics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloudDiagnosticsCreateCloudPolicyDocument(params *CloudDiagnosticsCreateCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCreateCloudPolicyDocumentOK, error)

	CloudDiagnosticsDeleteCloudPolicyDocument(params *CloudDiagnosticsDeleteCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsDeleteCloudPolicyDocumentOK, error)

	CloudDiagnosticsGetCloudPolicy(params *CloudDiagnosticsGetCloudPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetCloudPolicyOK, error)

	CloudDiagnosticsGetCloudPolicyDocument(params *CloudDiagnosticsGetCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetCloudPolicyDocumentOK, error)

	CloudDiagnosticsGetCloudPolicyVersion(params *CloudDiagnosticsGetCloudPolicyVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetCloudPolicyVersionOK, error)

	CloudDiagnosticsGetClusterHealthReport(params *CloudDiagnosticsGetClusterHealthReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetClusterHealthReportOK, error)

	CloudDiagnosticsGetClusterVersion(params *CloudDiagnosticsGetClusterVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetClusterVersionOK, error)

	CloudDiagnosticsMarkCloudPolicyLatest(params *CloudDiagnosticsMarkCloudPolicyLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsMarkCloudPolicyLatestOK, error)

	CloudDiagnosticsQueryCloudPolicies(params *CloudDiagnosticsQueryCloudPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsQueryCloudPoliciesOK, error)

	CloudDiagnosticsCheckClusterHealth(params *CloudDiagnosticsCheckClusterHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCheckClusterHealthOK, error)

	CloudDiagnosticsCheckClusterHealth2(params *CloudDiagnosticsCheckClusterHealth2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCheckClusterHealth2OK, error)

	CloudDiagnosticsCheckMicroserviceHealth(params *CloudDiagnosticsCheckMicroserviceHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCheckMicroserviceHealthOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CloudDiagnosticsCreateCloudPolicyDocument cloud diagnostics create cloud policy document API
*/
func (a *Client) CloudDiagnosticsCreateCloudPolicyDocument(params *CloudDiagnosticsCreateCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCreateCloudPolicyDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsCreateCloudPolicyDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_CreateCloudPolicyDocument",
		Method:             "POST",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsCreateCloudPolicyDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsCreateCloudPolicyDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsCreateCloudPolicyDocumentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsDeleteCloudPolicyDocument cloud diagnostics delete cloud policy document API
*/
func (a *Client) CloudDiagnosticsDeleteCloudPolicyDocument(params *CloudDiagnosticsDeleteCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsDeleteCloudPolicyDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsDeleteCloudPolicyDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_DeleteCloudPolicyDocument",
		Method:             "DELETE",
		PathPattern:        "/v1/cloud/policies/id/{fileURL}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsDeleteCloudPolicyDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsDeleteCloudPolicyDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsDeleteCloudPolicyDocumentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsGetCloudPolicy gets cloud policy latest version

  Get policy record for latest version of Cloud policy.
*/
func (a *Client) CloudDiagnosticsGetCloudPolicy(params *CloudDiagnosticsGetCloudPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetCloudPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsGetCloudPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_GetCloudPolicy",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies/name/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsGetCloudPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsGetCloudPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsGetCloudPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsGetCloudPolicyDocument gets cloud policy document

  Get policy document for specific version of Cloud policy.
*/
func (a *Client) CloudDiagnosticsGetCloudPolicyDocument(params *CloudDiagnosticsGetCloudPolicyDocumentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetCloudPolicyDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsGetCloudPolicyDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_GetCloudPolicyDocument",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies/id/{fileURL}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsGetCloudPolicyDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsGetCloudPolicyDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsGetCloudPolicyDocumentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsGetCloudPolicyVersion gets cloud policy specific version

  Get policy record for specific version of Cloud policy.
*/
func (a *Client) CloudDiagnosticsGetCloudPolicyVersion(params *CloudDiagnosticsGetCloudPolicyVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetCloudPolicyVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsGetCloudPolicyVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_GetCloudPolicyVersion",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies/name/{policy}/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsGetCloudPolicyVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsGetCloudPolicyVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsGetCloudPolicyVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsGetClusterHealthReport gets cloud services health report

  Get Cloud services health report.
*/
func (a *Client) CloudDiagnosticsGetClusterHealthReport(params *CloudDiagnosticsGetClusterHealthReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetClusterHealthReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsGetClusterHealthReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_GetClusterHealthReport",
		Method:             "GET",
		PathPattern:        "/v1/cloud/healthreport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsGetClusterHealthReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsGetClusterHealthReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsGetClusterHealthReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsGetClusterVersion gets cloud controller software version

  Get Cloud controller software version.
*/
func (a *Client) CloudDiagnosticsGetClusterVersion(params *CloudDiagnosticsGetClusterVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsGetClusterVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsGetClusterVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_GetClusterVersion",
		Method:             "GET",
		PathPattern:        "/v1/cloud/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsGetClusterVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsGetClusterVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsGetClusterVersionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsMarkCloudPolicyLatest cloud diagnostics mark cloud policy latest API
*/
func (a *Client) CloudDiagnosticsMarkCloudPolicyLatest(params *CloudDiagnosticsMarkCloudPolicyLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsMarkCloudPolicyLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsMarkCloudPolicyLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_MarkCloudPolicyLatest",
		Method:             "PUT",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsMarkCloudPolicyLatestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsMarkCloudPolicyLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsMarkCloudPolicyLatestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsQueryCloudPolicies queries cloud policies

  Query policy records of latest version of Cloud policies.
*/
func (a *Client) CloudDiagnosticsQueryCloudPolicies(params *CloudDiagnosticsQueryCloudPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsQueryCloudPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsQueryCloudPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_QueryCloudPolicies",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsQueryCloudPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsQueryCloudPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsQueryCloudPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsCheckClusterHealth checks cloud reachability

  Check Cloud reachability by sending a ping message to API gateway. API gateway will echo back either "pong" or the id specified.
*/
func (a *Client) CloudDiagnosticsCheckClusterHealth(params *CloudDiagnosticsCheckClusterHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCheckClusterHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsCheckClusterHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_checkClusterHealth",
		Method:             "GET",
		PathPattern:        "/v1/cloud/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsCheckClusterHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsCheckClusterHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsCheckClusterHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsCheckClusterHealth2 checks cloud reachability

  Check Cloud reachability by sending a ping message to API gateway. API gateway will echo back either "pong" or the id specified.
*/
func (a *Client) CloudDiagnosticsCheckClusterHealth2(params *CloudDiagnosticsCheckClusterHealth2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCheckClusterHealth2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsCheckClusterHealth2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_checkClusterHealth2",
		Method:             "GET",
		PathPattern:        "/v1/cloud/ping/id/{pingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsCheckClusterHealth2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsCheckClusterHealth2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsCheckClusterHealth2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CloudDiagnosticsCheckMicroserviceHealth checks cloud services health

  Check Cloud services health by sending a hello name to microservice behind API Gateway. Microservice will echo back the name.
*/
func (a *Client) CloudDiagnosticsCheckMicroserviceHealth(params *CloudDiagnosticsCheckMicroserviceHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloudDiagnosticsCheckMicroserviceHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloudDiagnosticsCheckMicroserviceHealthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloudDiagnostics_checkMicroserviceHealth",
		Method:             "POST",
		PathPattern:        "/v1/hello",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloudDiagnosticsCheckMicroserviceHealthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloudDiagnosticsCheckMicroserviceHealthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CloudDiagnosticsCheckMicroserviceHealthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
