// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package cloud_diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCloudDiagnosticsGetCloudPolicyVersionParams creates a new CloudDiagnosticsGetCloudPolicyVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCloudDiagnosticsGetCloudPolicyVersionParams() *CloudDiagnosticsGetCloudPolicyVersionParams {
	return &CloudDiagnosticsGetCloudPolicyVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCloudDiagnosticsGetCloudPolicyVersionParamsWithTimeout creates a new CloudDiagnosticsGetCloudPolicyVersionParams object
// with the ability to set a timeout on a request.
func NewCloudDiagnosticsGetCloudPolicyVersionParamsWithTimeout(timeout time.Duration) *CloudDiagnosticsGetCloudPolicyVersionParams {
	return &CloudDiagnosticsGetCloudPolicyVersionParams{
		timeout: timeout,
	}
}

// NewCloudDiagnosticsGetCloudPolicyVersionParamsWithContext creates a new CloudDiagnosticsGetCloudPolicyVersionParams object
// with the ability to set a context for a request.
func NewCloudDiagnosticsGetCloudPolicyVersionParamsWithContext(ctx context.Context) *CloudDiagnosticsGetCloudPolicyVersionParams {
	return &CloudDiagnosticsGetCloudPolicyVersionParams{
		Context: ctx,
	}
}

// NewCloudDiagnosticsGetCloudPolicyVersionParamsWithHTTPClient creates a new CloudDiagnosticsGetCloudPolicyVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewCloudDiagnosticsGetCloudPolicyVersionParamsWithHTTPClient(client *http.Client) *CloudDiagnosticsGetCloudPolicyVersionParams {
	return &CloudDiagnosticsGetCloudPolicyVersionParams{
		HTTPClient: client,
	}
}

/* CloudDiagnosticsGetCloudPolicyVersionParams contains all the parameters to send to the API endpoint
   for the cloud diagnostics get cloud policy version operation.

   Typically these are written to a http.Request.
*/
type CloudDiagnosticsGetCloudPolicyVersionParams struct {

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	// FileURL.
	FileURL *string

	// Policy.
	Policy string

	/* RevisionCreatedBy.

	   User data: Created By
	*/
	RevisionCreatedBy *string

	/* RevisionCurr.

	   Current Database version of the record
	*/
	RevisionCurr *string

	/* RevisionPrev.

	   Previous
	*/
	RevisionPrev *string

	/* RevisionUpdatedBy.

	   User data: Updated By
	*/
	RevisionUpdatedBy *string

	// Version.
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cloud diagnostics get cloud policy version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithDefaults() *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cloud diagnostics get cloud policy version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithTimeout(timeout time.Duration) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithContext(ctx context.Context) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithHTTPClient(client *http.Client) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithXRequestID(xRequestID *string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithFileURL adds the fileURL to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithFileURL(fileURL *string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetFileURL(fileURL)
	return o
}

// SetFileURL adds the fileUrl to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetFileURL(fileURL *string) {
	o.FileURL = fileURL
}

// WithPolicy adds the policy to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithPolicy(policy string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetPolicy(policy)
	return o
}

// SetPolicy adds the policy to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetPolicy(policy string) {
	o.Policy = policy
}

// WithRevisionCreatedBy adds the revisionCreatedBy to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithRevisionCreatedBy(revisionCreatedBy *string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetRevisionCreatedBy(revisionCreatedBy)
	return o
}

// SetRevisionCreatedBy adds the revisionCreatedBy to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetRevisionCreatedBy(revisionCreatedBy *string) {
	o.RevisionCreatedBy = revisionCreatedBy
}

// WithRevisionCurr adds the revisionCurr to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithRevisionCurr(revisionCurr *string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetRevisionCurr(revisionCurr)
	return o
}

// SetRevisionCurr adds the revisionCurr to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetRevisionCurr(revisionCurr *string) {
	o.RevisionCurr = revisionCurr
}

// WithRevisionPrev adds the revisionPrev to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithRevisionPrev(revisionPrev *string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetRevisionPrev(revisionPrev)
	return o
}

// SetRevisionPrev adds the revisionPrev to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetRevisionPrev(revisionPrev *string) {
	o.RevisionPrev = revisionPrev
}

// WithRevisionUpdatedBy adds the revisionUpdatedBy to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithRevisionUpdatedBy(revisionUpdatedBy *string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetRevisionUpdatedBy(revisionUpdatedBy)
	return o
}

// SetRevisionUpdatedBy adds the revisionUpdatedBy to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetRevisionUpdatedBy(revisionUpdatedBy *string) {
	o.RevisionUpdatedBy = revisionUpdatedBy
}

// WithVersion adds the version to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WithVersion(version string) *CloudDiagnosticsGetCloudPolicyVersionParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the cloud diagnostics get cloud policy version params
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *CloudDiagnosticsGetCloudPolicyVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.FileURL != nil {

		// query param fileURL
		var qrFileURL string

		if o.FileURL != nil {
			qrFileURL = *o.FileURL
		}
		qFileURL := qrFileURL
		if qFileURL != "" {

			if err := r.SetQueryParam("fileURL", qFileURL); err != nil {
				return err
			}
		}
	}

	// path param policy
	if err := r.SetPathParam("policy", o.Policy); err != nil {
		return err
	}

	if o.RevisionCreatedBy != nil {

		// query param revision.createdBy
		var qrRevisionCreatedBy string

		if o.RevisionCreatedBy != nil {
			qrRevisionCreatedBy = *o.RevisionCreatedBy
		}
		qRevisionCreatedBy := qrRevisionCreatedBy
		if qRevisionCreatedBy != "" {

			if err := r.SetQueryParam("revision.createdBy", qRevisionCreatedBy); err != nil {
				return err
			}
		}
	}

	if o.RevisionCurr != nil {

		// query param revision.curr
		var qrRevisionCurr string

		if o.RevisionCurr != nil {
			qrRevisionCurr = *o.RevisionCurr
		}
		qRevisionCurr := qrRevisionCurr
		if qRevisionCurr != "" {

			if err := r.SetQueryParam("revision.curr", qRevisionCurr); err != nil {
				return err
			}
		}
	}

	if o.RevisionPrev != nil {

		// query param revision.prev
		var qrRevisionPrev string

		if o.RevisionPrev != nil {
			qrRevisionPrev = *o.RevisionPrev
		}
		qRevisionPrev := qrRevisionPrev
		if qRevisionPrev != "" {

			if err := r.SetQueryParam("revision.prev", qRevisionPrev); err != nil {
				return err
			}
		}
	}

	if o.RevisionUpdatedBy != nil {

		// query param revision.updatedBy
		var qrRevisionUpdatedBy string

		if o.RevisionUpdatedBy != nil {
			qrRevisionUpdatedBy = *o.RevisionUpdatedBy
		}
		qRevisionUpdatedBy := qrRevisionUpdatedBy
		if qRevisionUpdatedBy != "" {

			if err := r.SetQueryParam("revision.updatedBy", qRevisionUpdatedBy); err != nil {
				return err
			}
		}
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
