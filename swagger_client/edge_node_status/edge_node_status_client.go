// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package edge_node_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge node status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge node status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EdgeNodeStatusGetEdgeNodeEdgeviewStatus(params *EdgeNodeStatusGetEdgeNodeEdgeviewStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEdgeviewStatusOK, error)

	EdgeNodeStatusGetEdgeNodeEdgeviewStatusByName(params *EdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameOK, error)

	EdgeNodeStatusGetEdgeNodeEvents(params *EdgeNodeStatusGetEdgeNodeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEventsOK, error)

	EdgeNodeStatusGetEdgeNodeEventsByName(params *EdgeNodeStatusGetEdgeNodeEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEventsByNameOK, error)

	EdgeNodeStatusGetEdgeNodeInfo(params *EdgeNodeStatusGetEdgeNodeInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeInfoOK, error)

	EdgeNodeStatusGetEdgeNodeInfoByName(params *EdgeNodeStatusGetEdgeNodeInfoByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeInfoByNameOK, error)

	EdgeNodeStatusGetEdgeNodeRawStatus(params *EdgeNodeStatusGetEdgeNodeRawStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeRawStatusOK, error)

	EdgeNodeStatusGetEdgeNodeRawStatusByName(params *EdgeNodeStatusGetEdgeNodeRawStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeRawStatusByNameOK, error)

	EdgeNodeStatusGetEdgeNodeResourceMetricsByID(params *EdgeNodeStatusGetEdgeNodeResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeResourceMetricsByIDOK, error)

	EdgeNodeStatusGetEdgeNodeResourceMetricsByName(params *EdgeNodeStatusGetEdgeNodeResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeResourceMetricsByNameOK, error)

	EdgeNodeStatusGetEdgeNodeStatus(params *EdgeNodeStatusGetEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeStatusOK, error)

	EdgeNodeStatusGetEdgeNodeStatusByName(params *EdgeNodeStatusGetEdgeNodeStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeStatusByNameOK, error)

	EdgeNodeStatusQueryEdgeNodeStatus(params *EdgeNodeStatusQueryEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusQueryEdgeNodeStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EdgeNodeStatusGetEdgeNodeEdgeviewStatus gets edge node edgeview status

Get the edgeview status of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeEdgeviewStatus(params *EdgeNodeStatusGetEdgeNodeEdgeviewStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEdgeviewStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeEdgeviewStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeEdgeviewStatus",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/status/edgeview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeEdgeviewStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeEdgeviewStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeEdgeviewStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeEdgeviewStatusByName gets edge node edgeview status by edge node name

Get the edgeview status of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeEdgeviewStatusByName(params *EdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeEdgeviewStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}/status/edgeview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeEdgeviewStatusByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeEvents gets edge node events by id

Get configuration and status events of an edge node by id.
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeEvents(params *EdgeNodeStatusGetEdgeNodeEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeEvents",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{objid}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeEventsByName gets edge node events by id

Get configuration and status events of an edge node by id.
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeEventsByName(params *EdgeNodeStatusGetEdgeNodeEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeEventsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeEventsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeEventsByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{objname}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeEventsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeEventsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeEventsByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeInfo gets edge node info

Get the info of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeInfo(params *EdgeNodeStatusGetEdgeNodeInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeInfo",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/status/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeInfoByName gets edge node info

Get the info of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeInfoByName(params *EdgeNodeStatusGetEdgeNodeInfoByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeInfoByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeInfoByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeInfoByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}/status/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeInfoByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeInfoByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeInfoByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeRawStatus gets edge node raw status

Get the raw status of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeRawStatus(params *EdgeNodeStatusGetEdgeNodeRawStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeRawStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeRawStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeRawStatus",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/status/metrics/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeRawStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeRawStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeRawStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeRawStatusByName gets edge node raw status

Get the raw status of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeRawStatusByName(params *EdgeNodeStatusGetEdgeNodeRawStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeRawStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeRawStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeRawStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}/status/metrics/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeRawStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeRawStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeRawStatusByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeResourceMetricsByID gets edge node resource usage timeline

Get the resource usage timeline of an edge node
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeResourceMetricsByID(params *EdgeNodeStatusGetEdgeNodeResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeResourceMetricsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeResourceMetricsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeResourceMetricsById",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{objid}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeResourceMetricsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeResourceMetricsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeResourceMetricsByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeResourceMetricsByName gets edge node resource usage timeline

Get the resource usage timeline of an edge node
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeResourceMetricsByName(params *EdgeNodeStatusGetEdgeNodeResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeResourceMetricsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeResourceMetricsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeResourceMetricsByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{objname}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeResourceMetricsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeResourceMetricsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeResourceMetricsByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeStatus gets edge node status

Get the status of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeStatus(params *EdgeNodeStatusGetEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeStatus",
		Method:             "GET",
		PathPattern:        "/v1/devices/id/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusGetEdgeNodeStatusByName gets edge node status

Get the status of an edge node as reported by the edge node itself
*/
func (a *Client) EdgeNodeStatusGetEdgeNodeStatusByName(params *EdgeNodeStatusGetEdgeNodeStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusGetEdgeNodeStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusGetEdgeNodeStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_GetEdgeNodeStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/devices/name/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusGetEdgeNodeStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusGetEdgeNodeStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusGetEdgeNodeStatusByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNodeStatusQueryEdgeNodeStatus queries status of edge nodes

Query the status of edge nodes as reported by the edge nodes themselves
*/
func (a *Client) EdgeNodeStatusQueryEdgeNodeStatus(params *EdgeNodeStatusQueryEdgeNodeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNodeStatusQueryEdgeNodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNodeStatusQueryEdgeNodeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNodeStatus_QueryEdgeNodeStatus",
		Method:             "GET",
		PathPattern:        "/v1/devices/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNodeStatusQueryEdgeNodeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNodeStatusQueryEdgeNodeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNodeStatusQueryEdgeNodeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
