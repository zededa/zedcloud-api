// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_node_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// EdgeNodeStatusGetEdgeNodeEventsByNameReader is a Reader for the EdgeNodeStatusGetEdgeNodeEventsByName structure.
type EdgeNodeStatusGetEdgeNodeEventsByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEdgeNodeStatusGetEdgeNodeEventsByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEdgeNodeStatusGetEdgeNodeEventsByNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEdgeNodeStatusGetEdgeNodeEventsByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewEdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewEdgeNodeStatusGetEdgeNodeEventsByNameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEdgeNodeStatusGetEdgeNodeEventsByNameOK creates a EdgeNodeStatusGetEdgeNodeEventsByNameOK with default headers values
func NewEdgeNodeStatusGetEdgeNodeEventsByNameOK() *EdgeNodeStatusGetEdgeNodeEventsByNameOK {
	return &EdgeNodeStatusGetEdgeNodeEventsByNameOK{}
}

/* EdgeNodeStatusGetEdgeNodeEventsByNameOK describes a response with status code 200, with default header values.

A successful response.
*/
type EdgeNodeStatusGetEdgeNodeEventsByNameOK struct {
	Payload *swagger_models.EventQueryResponse
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameOK) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] edgeNodeStatusGetEdgeNodeEventsByNameOK  %+v", 200, o.Payload)
}
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameOK) GetPayload() *swagger_models.EventQueryResponse {
	return o.Payload
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.EventQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized creates a EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized with default headers values
func NewEdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized() *EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized {
	return &EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized{}
}

/* EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] edgeNodeStatusGetEdgeNodeEventsByNameUnauthorized  %+v", 401, o.Payload)
}
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeStatusGetEdgeNodeEventsByNameForbidden creates a EdgeNodeStatusGetEdgeNodeEventsByNameForbidden with default headers values
func NewEdgeNodeStatusGetEdgeNodeEventsByNameForbidden() *EdgeNodeStatusGetEdgeNodeEventsByNameForbidden {
	return &EdgeNodeStatusGetEdgeNodeEventsByNameForbidden{}
}

/* EdgeNodeStatusGetEdgeNodeEventsByNameForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type EdgeNodeStatusGetEdgeNodeEventsByNameForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] edgeNodeStatusGetEdgeNodeEventsByNameForbidden  %+v", 403, o.Payload)
}
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeStatusGetEdgeNodeEventsByNameNotFound creates a EdgeNodeStatusGetEdgeNodeEventsByNameNotFound with default headers values
func NewEdgeNodeStatusGetEdgeNodeEventsByNameNotFound() *EdgeNodeStatusGetEdgeNodeEventsByNameNotFound {
	return &EdgeNodeStatusGetEdgeNodeEventsByNameNotFound{}
}

/* EdgeNodeStatusGetEdgeNodeEventsByNameNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type EdgeNodeStatusGetEdgeNodeEventsByNameNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] edgeNodeStatusGetEdgeNodeEventsByNameNotFound  %+v", 404, o.Payload)
}
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError creates a EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError with default headers values
func NewEdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError() *EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError {
	return &EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError{}
}

/* EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] edgeNodeStatusGetEdgeNodeEventsByNameInternalServerError  %+v", 500, o.Payload)
}
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout creates a EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout with default headers values
func NewEdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout() *EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout {
	return &EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout{}
}

/* EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] edgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout  %+v", 504, o.Payload)
}
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNodeStatusGetEdgeNodeEventsByNameDefault creates a EdgeNodeStatusGetEdgeNodeEventsByNameDefault with default headers values
func NewEdgeNodeStatusGetEdgeNodeEventsByNameDefault(code int) *EdgeNodeStatusGetEdgeNodeEventsByNameDefault {
	return &EdgeNodeStatusGetEdgeNodeEventsByNameDefault{
		_statusCode: code,
	}
}

/* EdgeNodeStatusGetEdgeNodeEventsByNameDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type EdgeNodeStatusGetEdgeNodeEventsByNameDefault struct {
	_statusCode int

	Payload *swagger_models.GooglerpcStatus
}

// Code gets the status code for the edge node status get edge node events by name default response
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameDefault) Code() int {
	return o._statusCode
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameDefault) Error() string {
	return fmt.Sprintf("[GET /v1/devices/name/{objname}/events][%d] EdgeNodeStatus_GetEdgeNodeEventsByName default  %+v", o._statusCode, o.Payload)
}
func (o *EdgeNodeStatusGetEdgeNodeEventsByNameDefault) GetPayload() *swagger_models.GooglerpcStatus {
	return o.Payload
}

func (o *EdgeNodeStatusGetEdgeNodeEventsByNameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
