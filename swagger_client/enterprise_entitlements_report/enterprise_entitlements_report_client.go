// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package enterprise_entitlements_report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new enterprise entitlements report API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for enterprise entitlements report API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EnterpriseEntitlementsReportCreateEnterpriseEntitlementData(params *EnterpriseEntitlementsReportCreateEnterpriseEntitlementDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportCreateEnterpriseEntitlementDataOK, error)

	EnterpriseEntitlementsReportGetAllowedEnterprises(params *EnterpriseEntitlementsReportGetAllowedEnterprisesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetAllowedEnterprisesOK, error)

	EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlements(params *EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsOK, error)

	EnterpriseEntitlementsReportGetAppInstReport(params *EnterpriseEntitlementsReportGetAppInstReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetAppInstReportOK, error)

	EnterpriseEntitlementsReportGetDeviceReport(params *EnterpriseEntitlementsReportGetDeviceReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetDeviceReportOK, error)

	EnterpriseEntitlementsReportGetEnterpriseEntitlementData(params *EnterpriseEntitlementsReportGetEnterpriseEntitlementDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetEnterpriseEntitlementDataOK, error)

	EnterpriseEntitlementsReportGetPluginReport(params *EnterpriseEntitlementsReportGetPluginReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetPluginReportOK, error)

	EnterpriseEntitlementsReportGetProjectReport(params *EnterpriseEntitlementsReportGetProjectReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetProjectReportOK, error)

	EnterpriseEntitlementsReportGetUserReport(params *EnterpriseEntitlementsReportGetUserReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetUserReportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EnterpriseEntitlementsReportCreateEnterpriseEntitlementData sets entitlement data for a enterprise

Set entitlement data for a enterprise.
*/
func (a *Client) EnterpriseEntitlementsReportCreateEnterpriseEntitlementData(params *EnterpriseEntitlementsReportCreateEnterpriseEntitlementDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportCreateEnterpriseEntitlementDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportCreateEnterpriseEntitlementDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_CreateEnterpriseEntitlementData",
		Method:             "PUT",
		PathPattern:        "/v1/entitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportCreateEnterpriseEntitlementDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportCreateEnterpriseEntitlementDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportCreateEnterpriseEntitlementDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetAllowedEnterprises gets the list of enterprises of which the logged user can query reports

Get the list of enterprises of which the logged user can query reports
*/
func (a *Client) EnterpriseEntitlementsReportGetAllowedEnterprises(params *EnterpriseEntitlementsReportGetAllowedEnterprisesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetAllowedEnterprisesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetAllowedEnterprisesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetAllowedEnterprises",
		Method:             "GET",
		PathPattern:        "/v1/reports/allowedenterprises",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetAllowedEnterprisesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetAllowedEnterprisesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetAllowedEnterprisesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlements gets the list of enterprises of which the logged user can view edit entitlements

Get the list of enterprises of which the logged user can view/edit entitlements
*/
func (a *Client) EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlements(params *EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetAllowedEnterprisesForEntitlements",
		Method:             "GET",
		PathPattern:        "/v1/entitlements/allowedenterprises",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetAllowedEnterprisesForEntitlementsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetAppInstReport gets app inst report

Get appInst report
*/
func (a *Client) EnterpriseEntitlementsReportGetAppInstReport(params *EnterpriseEntitlementsReportGetAppInstReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetAppInstReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetAppInstReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetAppInstReport",
		Method:             "GET",
		PathPattern:        "/v1/reports/apps/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetAppInstReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetAppInstReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetAppInstReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetDeviceReport gets device report

Get device report
*/
func (a *Client) EnterpriseEntitlementsReportGetDeviceReport(params *EnterpriseEntitlementsReportGetDeviceReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetDeviceReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetDeviceReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetDeviceReport",
		Method:             "GET",
		PathPattern:        "/v1/reports/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetDeviceReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetDeviceReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetDeviceReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetEnterpriseEntitlementData gets entitlement data for a enterprise

Get entitlement data for a enterprise
*/
func (a *Client) EnterpriseEntitlementsReportGetEnterpriseEntitlementData(params *EnterpriseEntitlementsReportGetEnterpriseEntitlementDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetEnterpriseEntitlementDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetEnterpriseEntitlementDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetEnterpriseEntitlementData",
		Method:             "GET",
		PathPattern:        "/v1/entitlements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetEnterpriseEntitlementDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetEnterpriseEntitlementDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetEnterpriseEntitlementDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetPluginReport gets plugin report

Get plugin report
*/
func (a *Client) EnterpriseEntitlementsReportGetPluginReport(params *EnterpriseEntitlementsReportGetPluginReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetPluginReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetPluginReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetPluginReport",
		Method:             "GET",
		PathPattern:        "/v1/reports/plugin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetPluginReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetPluginReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetPluginReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetProjectReport gets project report

Get project report
*/
func (a *Client) EnterpriseEntitlementsReportGetProjectReport(params *EnterpriseEntitlementsReportGetProjectReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetProjectReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetProjectReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetProjectReport",
		Method:             "GET",
		PathPattern:        "/v1/reports/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetProjectReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetProjectReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetProjectReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EnterpriseEntitlementsReportGetUserReport gets user report

Get user report
*/
func (a *Client) EnterpriseEntitlementsReportGetUserReport(params *EnterpriseEntitlementsReportGetUserReportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnterpriseEntitlementsReportGetUserReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnterpriseEntitlementsReportGetUserReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnterpriseEntitlementsReport_GetUserReport",
		Method:             "GET",
		PathPattern:        "/v1/reports/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnterpriseEntitlementsReportGetUserReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnterpriseEntitlementsReportGetUserReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnterpriseEntitlementsReportGetUserReportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
