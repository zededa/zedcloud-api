// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package resource_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resource group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ResourceGroupCreateResourceGroup(params *ResourceGroupCreateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupCreateResourceGroupOK, error)

	ResourceGroupDeleteResourceGroup(params *ResourceGroupDeleteResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupDeleteResourceGroupOK, error)

	ResourceGroupGetResourceGroup(params *ResourceGroupGetResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupOK, error)

	ResourceGroupGetResourceGroupByName(params *ResourceGroupGetResourceGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupByNameOK, error)

	ResourceGroupGetResourceGroupEvents(params *ResourceGroupGetResourceGroupEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupEventsOK, error)

	ResourceGroupGetResourceGroupEventsByName(params *ResourceGroupGetResourceGroupEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupEventsByNameOK, error)

	ResourceGroupGetResourceGroupResourceMetricsByID(params *ResourceGroupGetResourceGroupResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupResourceMetricsByIDOK, error)

	ResourceGroupGetResourceGroupResourceMetricsByName(params *ResourceGroupGetResourceGroupResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupResourceMetricsByNameOK, error)

	ResourceGroupQueryResourceGroups(params *ResourceGroupQueryResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupQueryResourceGroupsOK, error)

	ResourceGroupUpdateResourceGroup(params *ResourceGroupUpdateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupUpdateResourceGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ResourceGroupCreateResourceGroup creates resource group

  Create a resource group record.
*/
func (a *Client) ResourceGroupCreateResourceGroup(params *ResourceGroupCreateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupCreateResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupCreateResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_CreateResourceGroup",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupCreateResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupCreateResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupCreateResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupDeleteResourceGroup deletes resource group

  Delete a resource group record.
*/
func (a *Client) ResourceGroupDeleteResourceGroup(params *ResourceGroupDeleteResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupDeleteResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupDeleteResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_DeleteResourceGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupDeleteResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupDeleteResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupDeleteResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupGetResourceGroup gets resource group

  Get the configuration (without security details) of a resource group record.
*/
func (a *Client) ResourceGroupGetResourceGroup(params *ResourceGroupGetResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupGetResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_GetResourceGroup",
		Method:             "GET",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupGetResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupGetResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupGetResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupGetResourceGroupByName gets resource group

  Get the configuration (without security details) of a resource group record.
*/
func (a *Client) ResourceGroupGetResourceGroupByName(params *ResourceGroupGetResourceGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupGetResourceGroupByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_GetResourceGroupByName",
		Method:             "GET",
		PathPattern:        "/v1/projects/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupGetResourceGroupByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupGetResourceGroupByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupGetResourceGroupByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupGetResourceGroupEvents gets resource group events by id

  Get configuration and status events of a resource group by id.
*/
func (a *Client) ResourceGroupGetResourceGroupEvents(params *ResourceGroupGetResourceGroupEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupGetResourceGroupEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_GetResourceGroupEvents",
		Method:             "GET",
		PathPattern:        "/v1/projects/id/{objid}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupGetResourceGroupEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupGetResourceGroupEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupGetResourceGroupEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupGetResourceGroupEventsByName gets resource group events by name

  Get configuration and status events of a resource group by name.
*/
func (a *Client) ResourceGroupGetResourceGroupEventsByName(params *ResourceGroupGetResourceGroupEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupEventsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupGetResourceGroupEventsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_GetResourceGroupEventsByName",
		Method:             "GET",
		PathPattern:        "/v1/projects/name/{objname}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupGetResourceGroupEventsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupGetResourceGroupEventsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupGetResourceGroupEventsByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupGetResourceGroupResourceMetricsByID gets resource group resource usage timeline

  Get the resource usage timeline of a resource group as reported by the edge nodes in the resource group
*/
func (a *Client) ResourceGroupGetResourceGroupResourceMetricsByID(params *ResourceGroupGetResourceGroupResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupResourceMetricsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupGetResourceGroupResourceMetricsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_GetResourceGroupResourceMetricsById",
		Method:             "GET",
		PathPattern:        "/v1/projects/id/{objid}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupGetResourceGroupResourceMetricsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupGetResourceGroupResourceMetricsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupGetResourceGroupResourceMetricsByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupGetResourceGroupResourceMetricsByName gets resource group resource usage timeline

  Get the resource usage timeline of a resource group as reported by the edge nodes in the resource group
*/
func (a *Client) ResourceGroupGetResourceGroupResourceMetricsByName(params *ResourceGroupGetResourceGroupResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupGetResourceGroupResourceMetricsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupGetResourceGroupResourceMetricsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_GetResourceGroupResourceMetricsByName",
		Method:             "GET",
		PathPattern:        "/v1/projects/name/{objname}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupGetResourceGroupResourceMetricsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupGetResourceGroupResourceMetricsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupGetResourceGroupResourceMetricsByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupQueryResourceGroups queries resource groups

  Query the resource group records.
*/
func (a *Client) ResourceGroupQueryResourceGroups(params *ResourceGroupQueryResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupQueryResourceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupQueryResourceGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_QueryResourceGroups",
		Method:             "GET",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupQueryResourceGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupQueryResourceGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupQueryResourceGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResourceGroupUpdateResourceGroup updates resource group

  Update a resource group record. The usual pattern to update a resource group record is to retrieve the record and update with the modified values in a new body to update the resource group record.
*/
func (a *Client) ResourceGroupUpdateResourceGroup(params *ResourceGroupUpdateResourceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResourceGroupUpdateResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceGroupUpdateResourceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResourceGroup_UpdateResourceGroup",
		Method:             "PUT",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResourceGroupUpdateResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResourceGroupUpdateResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResourceGroupUpdateResourceGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
