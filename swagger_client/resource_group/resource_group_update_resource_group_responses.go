// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package resource_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// ResourceGroupUpdateResourceGroupReader is a Reader for the ResourceGroupUpdateResourceGroup structure.
type ResourceGroupUpdateResourceGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResourceGroupUpdateResourceGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResourceGroupUpdateResourceGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewResourceGroupUpdateResourceGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewResourceGroupUpdateResourceGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewResourceGroupUpdateResourceGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewResourceGroupUpdateResourceGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResourceGroupUpdateResourceGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewResourceGroupUpdateResourceGroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewResourceGroupUpdateResourceGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewResourceGroupUpdateResourceGroupOK creates a ResourceGroupUpdateResourceGroupOK with default headers values
func NewResourceGroupUpdateResourceGroupOK() *ResourceGroupUpdateResourceGroupOK {
	return &ResourceGroupUpdateResourceGroupOK{}
}

/*
ResourceGroupUpdateResourceGroupOK describes a response with status code 200, with default header values.

A successful response.
*/
type ResourceGroupUpdateResourceGroupOK struct {
	Payload *swagger_models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group o k response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this resource group update resource group o k response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group o k response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this resource group update resource group o k response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group o k response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupOK) IsCode(code int) bool {
	return code == 200
}

func (o *ResourceGroupUpdateResourceGroupOK) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupOK  %+v", 200, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupOK) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupOK  %+v", 200, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupOK) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceGroupUpdateResourceGroupUnauthorized creates a ResourceGroupUpdateResourceGroupUnauthorized with default headers values
func NewResourceGroupUpdateResourceGroupUnauthorized() *ResourceGroupUpdateResourceGroupUnauthorized {
	return &ResourceGroupUpdateResourceGroupUnauthorized{}
}

/*
ResourceGroupUpdateResourceGroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type ResourceGroupUpdateResourceGroupUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group unauthorized response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group unauthorized response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group unauthorized response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this resource group update resource group unauthorized response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group unauthorized response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ResourceGroupUpdateResourceGroupUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceGroupUpdateResourceGroupForbidden creates a ResourceGroupUpdateResourceGroupForbidden with default headers values
func NewResourceGroupUpdateResourceGroupForbidden() *ResourceGroupUpdateResourceGroupForbidden {
	return &ResourceGroupUpdateResourceGroupForbidden{}
}

/*
ResourceGroupUpdateResourceGroupForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type ResourceGroupUpdateResourceGroupForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group forbidden response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group forbidden response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group forbidden response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this resource group update resource group forbidden response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group forbidden response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ResourceGroupUpdateResourceGroupForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupForbidden  %+v", 403, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupForbidden  %+v", 403, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceGroupUpdateResourceGroupNotFound creates a ResourceGroupUpdateResourceGroupNotFound with default headers values
func NewResourceGroupUpdateResourceGroupNotFound() *ResourceGroupUpdateResourceGroupNotFound {
	return &ResourceGroupUpdateResourceGroupNotFound{}
}

/*
ResourceGroupUpdateResourceGroupNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type ResourceGroupUpdateResourceGroupNotFound struct {
	Payload *swagger_models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group not found response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group not found response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group not found response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this resource group update resource group not found response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group not found response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ResourceGroupUpdateResourceGroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupNotFound  %+v", 404, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupNotFound  %+v", 404, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupNotFound) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceGroupUpdateResourceGroupConflict creates a ResourceGroupUpdateResourceGroupConflict with default headers values
func NewResourceGroupUpdateResourceGroupConflict() *ResourceGroupUpdateResourceGroupConflict {
	return &ResourceGroupUpdateResourceGroupConflict{}
}

/*
ResourceGroupUpdateResourceGroupConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing resource group record.
*/
type ResourceGroupUpdateResourceGroupConflict struct {
	Payload *swagger_models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group conflict response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group conflict response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group conflict response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this resource group update resource group conflict response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group conflict response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupConflict) IsCode(code int) bool {
	return code == 409
}

func (o *ResourceGroupUpdateResourceGroupConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupConflict  %+v", 409, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupConflict) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupConflict  %+v", 409, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupConflict) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceGroupUpdateResourceGroupInternalServerError creates a ResourceGroupUpdateResourceGroupInternalServerError with default headers values
func NewResourceGroupUpdateResourceGroupInternalServerError() *ResourceGroupUpdateResourceGroupInternalServerError {
	return &ResourceGroupUpdateResourceGroupInternalServerError{}
}

/*
ResourceGroupUpdateResourceGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type ResourceGroupUpdateResourceGroupInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group internal server error response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group internal server error response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group internal server error response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this resource group update resource group internal server error response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this resource group update resource group internal server error response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ResourceGroupUpdateResourceGroupInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupInternalServerError  %+v", 500, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceGroupUpdateResourceGroupGatewayTimeout creates a ResourceGroupUpdateResourceGroupGatewayTimeout with default headers values
func NewResourceGroupUpdateResourceGroupGatewayTimeout() *ResourceGroupUpdateResourceGroupGatewayTimeout {
	return &ResourceGroupUpdateResourceGroupGatewayTimeout{}
}

/*
ResourceGroupUpdateResourceGroupGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type ResourceGroupUpdateResourceGroupGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group gateway timeout response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group gateway timeout response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group gateway timeout response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this resource group update resource group gateway timeout response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this resource group update resource group gateway timeout response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] resourceGroupUpdateResourceGroupGatewayTimeout  %+v", 504, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceGroupUpdateResourceGroupDefault creates a ResourceGroupUpdateResourceGroupDefault with default headers values
func NewResourceGroupUpdateResourceGroupDefault(code int) *ResourceGroupUpdateResourceGroupDefault {
	return &ResourceGroupUpdateResourceGroupDefault{
		_statusCode: code,
	}
}

/*
ResourceGroupUpdateResourceGroupDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ResourceGroupUpdateResourceGroupDefault struct {
	_statusCode int

	Payload *swagger_models.GooglerpcStatus
}

// Code gets the status code for the resource group update resource group default response
func (o *ResourceGroupUpdateResourceGroupDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this resource group update resource group default response has a 2xx status code
func (o *ResourceGroupUpdateResourceGroupDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this resource group update resource group default response has a 3xx status code
func (o *ResourceGroupUpdateResourceGroupDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this resource group update resource group default response has a 4xx status code
func (o *ResourceGroupUpdateResourceGroupDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this resource group update resource group default response has a 5xx status code
func (o *ResourceGroupUpdateResourceGroupDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this resource group update resource group default response a status code equal to that given
func (o *ResourceGroupUpdateResourceGroupDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ResourceGroupUpdateResourceGroupDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] ResourceGroup_UpdateResourceGroup default  %+v", o._statusCode, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupDefault) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] ResourceGroup_UpdateResourceGroup default  %+v", o._statusCode, o.Payload)
}

func (o *ResourceGroupUpdateResourceGroupDefault) GetPayload() *swagger_models.GooglerpcStatus {
	return o.Payload
}

func (o *ResourceGroupUpdateResourceGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ResourceGroupUpdateResourceGroupBody Resource group detail
//
// Resource group for edge gateway Base OS or for eedge applications.
// Example: {"attr":{},"description":"My test resource group for Edge computing","id":"d1125b0f-633d-459c-99c6-f47e7467cebc","name":"my-test-project","numdevices":208,"revision":{"createdAt":{"seconds":1592068270},"createdBy":"admin@my-company.com","curr":"1","updatedAt":{"seconds":1592068271},"updatedBy":"admin@my-company.com"},"title":"My Test resource group","type":"TAG_TYPE_PROJECT"}
swagger:model ResourceGroupUpdateResourceGroupBody
*/
type ResourceGroupUpdateResourceGroupBody struct {

	// Resource group wide policy for edge applications to be deployed on all edge nodes on this resource group
	// Read Only: true
	AppPolicy *swagger_models.PolicyConfig `json:"appPolicy,omitempty"`

	// Attestation policy to enforce on all devices of this project
	AttestationPolicy *swagger_models.PolicyConfig `json:"attestationPolicy,omitempty"`

	// Resource group wide configuration for edge nodes
	// Read Only: true
	Attr map[string]string `json:"attr,omitempty"`

	// Resource group wide policy for Azure IoTEdge configuration to be applied to all edge applications
	// Read Only: true
	CloudPolicy *swagger_models.PolicyConfig `json:"cloudPolicy,omitempty"`

	// Deployment template containing different types of policies
	Deployment *swagger_models.Deployment `json:"deployment,omitempty"`

	// Detailed description of the resource group.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// Edgeview policy on devices of this project
	EdgeviewPolicy *swagger_models.PolicyConfig `json:"edgeviewPolicy,omitempty"`

	// Resource group wide policy for Azure module configuration to be applied to all edge applications
	// Read Only: true
	ModulePolicy []*swagger_models.PolicyConfig `json:"modulePolicy"`

	// User defined name of the resource group, unique across the enterprise. Once resource group is created, name can’t be changed.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// Network policy to enforce on all devices of this project
	NetworkPolicy *swagger_models.PolicyConfig `json:"networkPolicy,omitempty"`

	// Number of edge nodes in this resource group
	// Read Only: true
	Numdevices int64 `json:"numdevices,omitempty"`

	// system defined info
	// Read Only: true
	Revision *swagger_models.ObjectRevision `json:"revision,omitempty"`

	// User defined title of the resource group. Title can be changed at any time.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`

	// Resource group type
	// Required: true
	Type *swagger_models.TagType `json:"type"`
}

// Validate validates this resource group update resource group body
func (o *ResourceGroupUpdateResourceGroupBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAttestationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCloudPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEdgeviewPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateModulePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateAppPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.AppPolicy) { // not required
		return nil
	}

	if o.AppPolicy != nil {
		if err := o.AppPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "appPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "appPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateAttestationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.AttestationPolicy) { // not required
		return nil
	}

	if o.AttestationPolicy != nil {
		if err := o.AttestationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attestationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "attestationPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateCloudPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.CloudPolicy) { // not required
		return nil
	}

	if o.CloudPolicy != nil {
		if err := o.CloudPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cloudPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cloudPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateDeployment(formats strfmt.Registry) error {
	if swag.IsZero(o.Deployment) { // not required
		return nil
	}

	if o.Deployment != nil {
		if err := o.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "deployment")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateEdgeviewPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.EdgeviewPolicy) { // not required
		return nil
	}

	if o.EdgeviewPolicy != nil {
		if err := o.EdgeviewPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "edgeviewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "edgeviewPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateModulePolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.ModulePolicy) { // not required
		return nil
	}

	for i := 0; i < len(o.ModulePolicy); i++ {
		if swag.IsZero(o.ModulePolicy[i]) { // not required
			continue
		}

		if o.ModulePolicy[i] != nil {
			if err := o.ModulePolicy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateNetworkPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkPolicy) { // not required
		return nil
	}

	if o.NetworkPolicy != nil {
		if err := o.NetworkPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "networkPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "networkPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource group update resource group body based on the context it is used
func (o *ResourceGroupUpdateResourceGroupBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAttestationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAttr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCloudPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEdgeviewPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateModulePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNetworkPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNumdevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateAppPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.AppPolicy != nil {
		if err := o.AppPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "appPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "appPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateAttestationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.AttestationPolicy != nil {
		if err := o.AttestationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attestationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "attestationPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateAttr(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateCloudPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.CloudPolicy != nil {
		if err := o.CloudPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cloudPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cloudPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateDeployment(ctx context.Context, formats strfmt.Registry) error {

	if o.Deployment != nil {
		if err := o.Deployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "deployment")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateEdgeviewPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.EdgeviewPolicy != nil {
		if err := o.EdgeviewPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "edgeviewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "edgeviewPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateModulePolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"modulePolicy", "body", []*swagger_models.PolicyConfig(o.ModulePolicy)); err != nil {
		return err
	}

	for i := 0; i < len(o.ModulePolicy); i++ {

		if o.ModulePolicy[i] != nil {
			if err := o.ModulePolicy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateNetworkPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.NetworkPolicy != nil {
		if err := o.NetworkPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "networkPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "networkPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateNumdevices(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"numdevices", "body", int64(o.Numdevices)); err != nil {
		return err
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *ResourceGroupUpdateResourceGroupBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {
		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ResourceGroupUpdateResourceGroupBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResourceGroupUpdateResourceGroupBody) UnmarshalBinary(b []byte) error {
	var res ResourceGroupUpdateResourceGroupBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
