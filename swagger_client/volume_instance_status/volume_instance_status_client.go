// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package volume_instance_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volume instance status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volume instance status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	VolumeInstanceStatusGetVolumeInstanceEvents(params *VolumeInstanceStatusGetVolumeInstanceEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceEventsOK, error)

	VolumeInstanceStatusGetVolumeInstanceEventsByName(params *VolumeInstanceStatusGetVolumeInstanceEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceEventsByNameOK, error)

	VolumeInstanceStatusGetVolumeInstanceStatus(params *VolumeInstanceStatusGetVolumeInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceStatusOK, error)

	VolumeInstanceStatusGetVolumeInstanceStatusByName(params *VolumeInstanceStatusGetVolumeInstanceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceStatusByNameOK, error)

	VolumeInstanceStatusQueryVolumeInstanceStatus(params *VolumeInstanceStatusQueryVolumeInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusQueryVolumeInstanceStatusOK, error)

	VolumeInstanceStatusQueryVolumeInstanceStatusConfig(params *VolumeInstanceStatusQueryVolumeInstanceStatusConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusQueryVolumeInstanceStatusConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
VolumeInstanceStatusGetVolumeInstanceEvents gets edge volume instance events by id

Get configuration and status events of an edge volume by id.
*/
func (a *Client) VolumeInstanceStatusGetVolumeInstanceEvents(params *VolumeInstanceStatusGetVolumeInstanceEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInstanceStatusGetVolumeInstanceEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceStatus_GetVolumeInstanceEvents",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/id/{objid}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceStatusGetVolumeInstanceEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceStatusGetVolumeInstanceEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceStatusGetVolumeInstanceEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VolumeInstanceStatusGetVolumeInstanceEventsByName gets edge volume instance events by name

Get configuration and status events of an edge volume by name.
*/
func (a *Client) VolumeInstanceStatusGetVolumeInstanceEventsByName(params *VolumeInstanceStatusGetVolumeInstanceEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceEventsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInstanceStatusGetVolumeInstanceEventsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceStatus_GetVolumeInstanceEventsByName",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/name/{objname}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceStatusGetVolumeInstanceEventsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceStatusGetVolumeInstanceEventsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceStatusGetVolumeInstanceEventsByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VolumeInstanceStatusGetVolumeInstanceStatus gets edge volume instance status

Get the status of an edge volume instance record.
*/
func (a *Client) VolumeInstanceStatusGetVolumeInstanceStatus(params *VolumeInstanceStatusGetVolumeInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInstanceStatusGetVolumeInstanceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceStatus_GetVolumeInstanceStatus",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/id/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceStatusGetVolumeInstanceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceStatusGetVolumeInstanceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceStatusGetVolumeInstanceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VolumeInstanceStatusGetVolumeInstanceStatusByName gets edge volume instance status

Get the status of an edge volume instance record.
*/
func (a *Client) VolumeInstanceStatusGetVolumeInstanceStatusByName(params *VolumeInstanceStatusGetVolumeInstanceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusGetVolumeInstanceStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInstanceStatusGetVolumeInstanceStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceStatus_GetVolumeInstanceStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/name/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceStatusGetVolumeInstanceStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceStatusGetVolumeInstanceStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceStatusGetVolumeInstanceStatusByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VolumeInstanceStatusQueryVolumeInstanceStatus queries status of edge volume instances

Query the status of edge volume instance records.
*/
func (a *Client) VolumeInstanceStatusQueryVolumeInstanceStatus(params *VolumeInstanceStatusQueryVolumeInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusQueryVolumeInstanceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInstanceStatusQueryVolumeInstanceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceStatus_QueryVolumeInstanceStatus",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceStatusQueryVolumeInstanceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceStatusQueryVolumeInstanceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceStatusQueryVolumeInstanceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VolumeInstanceStatusQueryVolumeInstanceStatusConfig queries status and config of edge volume instances

Query the status and config of edge volume instance records.
*/
func (a *Client) VolumeInstanceStatusQueryVolumeInstanceStatusConfig(params *VolumeInstanceStatusQueryVolumeInstanceStatusConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceStatusQueryVolumeInstanceStatusConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInstanceStatusQueryVolumeInstanceStatusConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceStatus_QueryVolumeInstanceStatusConfig",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/status-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceStatusQueryVolumeInstanceStatusConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceStatusQueryVolumeInstanceStatusConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceStatusQueryVolumeInstanceStatusConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
