// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package edge_application_instance_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams() *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParamsWithTimeout creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams object
// with the ability to set a timeout on a request.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParamsWithTimeout(timeout time.Duration) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams{
		timeout: timeout,
	}
}

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParamsWithContext creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams object
// with the ability to set a context for a request.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParamsWithContext(ctx context.Context) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams{
		Context: ctx,
	}
}

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParamsWithHTTPClient creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParamsWithHTTPClient(client *http.Client) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams{
		HTTPClient: client,
	}
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams contains all the parameters to send to the API endpoint

	for the edge application instance status get edge application instance logs operation.

	Typically these are written to a http.Request.
*/
type EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams struct {

	/* CursorOrderBy.

	   OrderBy helps in sorting the list response
	*/
	CursorOrderBy []string

	/* CursorPageNum.

	   Page Number

	   Format: int64
	*/
	CursorPageNum *int64

	/* CursorPageSize.

	   Defines the page size

	   Format: int64
	*/
	CursorPageSize *int64

	/* CursorPageToken.

	   Page Token
	*/
	CursorPageToken *string

	/* CursorTotalPages.

	   Total number of pages to be fetched.

	   Format: int64
	*/
	CursorTotalPages *int64

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	/* EndTime.

	   entime for querying the app instacne logs

	   Format: date-time
	*/
	EndTime *strfmt.DateTime

	/* ID.

	   System defined universally unique Id of the app instance
	*/
	ID string

	/* Interval.

	   interval at which logs needs to fetched

	   Format: date-time
	*/
	Interval *strfmt.DateTime

	/* StartTime.

	   start time for querying the  app instance logs

	   Format: date-time
	*/
	StartTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the edge application instance status get edge application instance logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithDefaults() *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the edge application instance status get edge application instance logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithTimeout(timeout time.Duration) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithContext(ctx context.Context) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithHTTPClient(client *http.Client) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursorOrderBy adds the cursorOrderBy to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithCursorOrderBy(cursorOrderBy []string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetCursorOrderBy(cursorOrderBy)
	return o
}

// SetCursorOrderBy adds the cursorOrderBy to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetCursorOrderBy(cursorOrderBy []string) {
	o.CursorOrderBy = cursorOrderBy
}

// WithCursorPageNum adds the cursorPageNum to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithCursorPageNum(cursorPageNum *int64) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetCursorPageNum(cursorPageNum)
	return o
}

// SetCursorPageNum adds the cursorPageNum to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetCursorPageNum(cursorPageNum *int64) {
	o.CursorPageNum = cursorPageNum
}

// WithCursorPageSize adds the cursorPageSize to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithCursorPageSize(cursorPageSize *int64) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetCursorPageSize(cursorPageSize)
	return o
}

// SetCursorPageSize adds the cursorPageSize to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetCursorPageSize(cursorPageSize *int64) {
	o.CursorPageSize = cursorPageSize
}

// WithCursorPageToken adds the cursorPageToken to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithCursorPageToken(cursorPageToken *string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetCursorPageToken(cursorPageToken)
	return o
}

// SetCursorPageToken adds the cursorPageToken to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetCursorPageToken(cursorPageToken *string) {
	o.CursorPageToken = cursorPageToken
}

// WithCursorTotalPages adds the cursorTotalPages to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithCursorTotalPages(cursorTotalPages *int64) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetCursorTotalPages(cursorTotalPages)
	return o
}

// SetCursorTotalPages adds the cursorTotalPages to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetCursorTotalPages(cursorTotalPages *int64) {
	o.CursorTotalPages = cursorTotalPages
}

// WithXRequestID adds the xRequestID to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithXRequestID(xRequestID *string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithEndTime adds the endTime to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithEndTime(endTime *strfmt.DateTime) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithID adds the id to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithID(id string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetID(id string) {
	o.ID = id
}

// WithInterval adds the interval to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithInterval(interval *strfmt.DateTime) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetInterval(interval *strfmt.DateTime) {
	o.Interval = interval
}

// WithStartTime adds the startTime to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WithStartTime(startTime *strfmt.DateTime) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the edge application instance status get edge application instance logs params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CursorOrderBy != nil {

		// binding items for Cursor.orderBy
		joinedCursorOrderBy := o.bindParamCursorOrderBy(reg)

		// query array param Cursor.orderBy
		if err := r.SetQueryParam("Cursor.orderBy", joinedCursorOrderBy...); err != nil {
			return err
		}
	}

	if o.CursorPageNum != nil {

		// query param Cursor.pageNum
		var qrCursorPageNum int64

		if o.CursorPageNum != nil {
			qrCursorPageNum = *o.CursorPageNum
		}
		qCursorPageNum := swag.FormatInt64(qrCursorPageNum)
		if qCursorPageNum != "" {

			if err := r.SetQueryParam("Cursor.pageNum", qCursorPageNum); err != nil {
				return err
			}
		}
	}

	if o.CursorPageSize != nil {

		// query param Cursor.pageSize
		var qrCursorPageSize int64

		if o.CursorPageSize != nil {
			qrCursorPageSize = *o.CursorPageSize
		}
		qCursorPageSize := swag.FormatInt64(qrCursorPageSize)
		if qCursorPageSize != "" {

			if err := r.SetQueryParam("Cursor.pageSize", qCursorPageSize); err != nil {
				return err
			}
		}
	}

	if o.CursorPageToken != nil {

		// query param Cursor.pageToken
		var qrCursorPageToken string

		if o.CursorPageToken != nil {
			qrCursorPageToken = *o.CursorPageToken
		}
		qCursorPageToken := qrCursorPageToken
		if qCursorPageToken != "" {

			if err := r.SetQueryParam("Cursor.pageToken", qCursorPageToken); err != nil {
				return err
			}
		}
	}

	if o.CursorTotalPages != nil {

		// query param Cursor.totalPages
		var qrCursorTotalPages int64

		if o.CursorTotalPages != nil {
			qrCursorTotalPages = *o.CursorTotalPages
		}
		qCursorTotalPages := swag.FormatInt64(qrCursorTotalPages)
		if qCursorTotalPages != "" {

			if err := r.SetQueryParam("Cursor.totalPages", qCursorTotalPages); err != nil {
				return err
			}
		}
	}

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime strfmt.DateTime

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Interval != nil {

		// query param interval
		var qrInterval strfmt.DateTime

		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := qrInterval.String()
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime strfmt.DateTime

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogs binds the parameter Cursor.orderBy
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams) bindParamCursorOrderBy(formats strfmt.Registry) []string {
	cursorOrderByIR := o.CursorOrderBy

	var cursorOrderByIC []string
	for _, cursorOrderByIIR := range cursorOrderByIR { // explode []string

		cursorOrderByIIV := cursorOrderByIIR // string as string
		cursorOrderByIC = append(cursorOrderByIC, cursorOrderByIIV)
	}

	// items.CollectionFormat: "multi"
	cursorOrderByIS := swag.JoinByFormat(cursorOrderByIC, "multi")

	return cursorOrderByIS
}
