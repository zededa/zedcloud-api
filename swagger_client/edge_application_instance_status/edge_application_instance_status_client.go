// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package edge_application_instance_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge application instance status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge application instance status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EdgeApplicationInstanceStatusGetApplicationInterfaceTags(params *EdgeApplicationInstanceStatusGetApplicationInterfaceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetApplicationInterfaceTagsOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEvents(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByName(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogs(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByID(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByName(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatus(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByName(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2OK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsOK, error)

	EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2OK, error)

	EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatus(params *EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusOK, error)

	EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfig(params *EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EdgeApplicationInstanceStatusGetApplicationInterfaceTags queries application instance tags

Application Instance tags LIST API is to fetch the interfaces tags attached to app instances.
*/
func (a *Client) EdgeApplicationInstanceStatusGetApplicationInterfaceTags(params *EdgeApplicationInstanceStatusGetApplicationInterfaceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetApplicationInterfaceTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetApplicationInterfaceTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetApplicationInterfaceTags",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetApplicationInterfaceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetApplicationInterfaceTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetApplicationInterfaceTagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEvents gets edge application instance events by id

Get configuration and status events of an edge application instance by id.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEvents(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceEvents",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{objid}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByName gets edge application instance events by name

Get configuration and status events of an edge application instance by name.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByName(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceEventsByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/name/{objname}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceEventsByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogs gets edge application instance log

Get the log of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogs(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceLogs",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByID gets edge application instance resource usage timeline

Get the resource usage timeline of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByID(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceResourceMetricsById",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{objid}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByName gets edge application instance resource usage timeline

Get the resource usage timeline of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByName(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceResourceMetricsByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/name/{objname}/timeSeries/{mType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceResourceMetricsByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatus gets edge application instance status

Get the status of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatus(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceStatus",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByName gets edge application instance status

Get the status of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByName(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/name/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceStatusByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers gets edge application instance top talkers of the network traffic flows

Get the top talkers of the network traffic flows of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceTopTalkers",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{id}/flowlog/toptalkers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2 gets edge application instance top talkers of the network traffic flows

Get the top talkers of the network traffic flows of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceTopTalkers2",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/name/{name}/flowlog/toptalkers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows gets edge application instance network traffic flow log

Get the network traffic flow log of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceTrafficFlows",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{id}/flowlog/classification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlowsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2 gets edge application instance network traffic flow log

Get the network traffic flow log of an edge application instance as reported by the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2(params *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_GetEdgeApplicationInstanceTrafficFlows2",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/name/{name}/flowlog/classification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTrafficFlows2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatus queries status of edge application instances

Query the status of edge application instances as reported by the edge nodes where the edge application instances have been deployed.
*/
func (a *Client) EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatus(params *EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_QueryEdgeApplicationInstanceStatus",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfig queries status and config of edge application instances

Edge application instances status config API is a composite API for application instance config and application instance status
*/
func (a *Client) EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfig(params *EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceStatus_QueryEdgeApplicationInstanceStatusConfig",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/status-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceStatusQueryEdgeApplicationInstanceStatusConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
