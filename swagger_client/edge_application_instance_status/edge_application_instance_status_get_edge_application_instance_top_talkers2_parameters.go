// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package edge_application_instance_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params() *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2ParamsWithTimeout creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params object
// with the ability to set a timeout on a request.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2ParamsWithTimeout(timeout time.Duration) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params{
		timeout: timeout,
	}
}

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2ParamsWithContext creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params object
// with the ability to set a context for a request.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2ParamsWithContext(ctx context.Context) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params{
		Context: ctx,
	}
}

// NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2ParamsWithHTTPClient creates a new EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params object
// with the ability to set a custom HTTPClient for a request.
func NewEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2ParamsWithHTTPClient(client *http.Client) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	return &EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params{
		HTTPClient: client,
	}
}

/*
EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params contains all the parameters to send to the API endpoint

	for the edge application instance status get edge application instance top talkers2 operation.

	Typically these are written to a http.Request.
*/
type EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params struct {

	/* CursorOrderBy.

	   OrderBy helps in sorting the list response
	*/
	CursorOrderBy []string

	/* CursorPageNum.

	   Page Number

	   Format: int64
	*/
	CursorPageNum *int64

	/* CursorPageSize.

	   Defines the page size

	   Format: int64
	*/
	CursorPageSize *int64

	/* CursorPageToken.

	   Page Token
	*/
	CursorPageToken *string

	/* CursorTotalPages.

	   Total number of pages to be fetched.

	   Format: int64
	*/
	CursorTotalPages *int64

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	// EndTime.
	//
	// Format: date-time
	EndTime *strfmt.DateTime

	// EnterpriseID.
	EnterpriseID *string

	// ID.
	ID *string

	// MetricType.
	//
	// Default: "FLOW_LOG_METRIC_UNSPECIFIED"
	MetricType *string

	// Name.
	Name string

	// StartTime.
	//
	// Format: date-time
	StartTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the edge application instance status get edge application instance top talkers2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithDefaults() *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the edge application instance status get edge application instance top talkers2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetDefaults() {
	var (
		metricTypeDefault = string("FLOW_LOG_METRIC_UNSPECIFIED")
	)

	val := EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params{
		MetricType: &metricTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithTimeout(timeout time.Duration) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithContext(ctx context.Context) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithHTTPClient(client *http.Client) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursorOrderBy adds the cursorOrderBy to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithCursorOrderBy(cursorOrderBy []string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetCursorOrderBy(cursorOrderBy)
	return o
}

// SetCursorOrderBy adds the cursorOrderBy to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetCursorOrderBy(cursorOrderBy []string) {
	o.CursorOrderBy = cursorOrderBy
}

// WithCursorPageNum adds the cursorPageNum to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithCursorPageNum(cursorPageNum *int64) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetCursorPageNum(cursorPageNum)
	return o
}

// SetCursorPageNum adds the cursorPageNum to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetCursorPageNum(cursorPageNum *int64) {
	o.CursorPageNum = cursorPageNum
}

// WithCursorPageSize adds the cursorPageSize to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithCursorPageSize(cursorPageSize *int64) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetCursorPageSize(cursorPageSize)
	return o
}

// SetCursorPageSize adds the cursorPageSize to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetCursorPageSize(cursorPageSize *int64) {
	o.CursorPageSize = cursorPageSize
}

// WithCursorPageToken adds the cursorPageToken to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithCursorPageToken(cursorPageToken *string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetCursorPageToken(cursorPageToken)
	return o
}

// SetCursorPageToken adds the cursorPageToken to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetCursorPageToken(cursorPageToken *string) {
	o.CursorPageToken = cursorPageToken
}

// WithCursorTotalPages adds the cursorTotalPages to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithCursorTotalPages(cursorTotalPages *int64) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetCursorTotalPages(cursorTotalPages)
	return o
}

// SetCursorTotalPages adds the cursorTotalPages to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetCursorTotalPages(cursorTotalPages *int64) {
	o.CursorTotalPages = cursorTotalPages
}

// WithXRequestID adds the xRequestID to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithXRequestID(xRequestID *string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithEndTime adds the endTime to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithEndTime(endTime *strfmt.DateTime) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithEnterpriseID adds the enterpriseID to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithEnterpriseID(enterpriseID *string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetEnterpriseID(enterpriseID)
	return o
}

// SetEnterpriseID adds the enterpriseId to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetEnterpriseID(enterpriseID *string) {
	o.EnterpriseID = enterpriseID
}

// WithID adds the id to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithID(id *string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetID(id *string) {
	o.ID = id
}

// WithMetricType adds the metricType to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithMetricType(metricType *string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetMetricType(metricType)
	return o
}

// SetMetricType adds the metricType to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetMetricType(metricType *string) {
	o.MetricType = metricType
}

// WithName adds the name to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithName(name string) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetName(name string) {
	o.Name = name
}

// WithStartTime adds the startTime to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WithStartTime(startTime *strfmt.DateTime) *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the edge application instance status get edge application instance top talkers2 params
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CursorOrderBy != nil {

		// binding items for Cursor.orderBy
		joinedCursorOrderBy := o.bindParamCursorOrderBy(reg)

		// query array param Cursor.orderBy
		if err := r.SetQueryParam("Cursor.orderBy", joinedCursorOrderBy...); err != nil {
			return err
		}
	}

	if o.CursorPageNum != nil {

		// query param Cursor.pageNum
		var qrCursorPageNum int64

		if o.CursorPageNum != nil {
			qrCursorPageNum = *o.CursorPageNum
		}
		qCursorPageNum := swag.FormatInt64(qrCursorPageNum)
		if qCursorPageNum != "" {

			if err := r.SetQueryParam("Cursor.pageNum", qCursorPageNum); err != nil {
				return err
			}
		}
	}

	if o.CursorPageSize != nil {

		// query param Cursor.pageSize
		var qrCursorPageSize int64

		if o.CursorPageSize != nil {
			qrCursorPageSize = *o.CursorPageSize
		}
		qCursorPageSize := swag.FormatInt64(qrCursorPageSize)
		if qCursorPageSize != "" {

			if err := r.SetQueryParam("Cursor.pageSize", qCursorPageSize); err != nil {
				return err
			}
		}
	}

	if o.CursorPageToken != nil {

		// query param Cursor.pageToken
		var qrCursorPageToken string

		if o.CursorPageToken != nil {
			qrCursorPageToken = *o.CursorPageToken
		}
		qCursorPageToken := qrCursorPageToken
		if qCursorPageToken != "" {

			if err := r.SetQueryParam("Cursor.pageToken", qCursorPageToken); err != nil {
				return err
			}
		}
	}

	if o.CursorTotalPages != nil {

		// query param Cursor.totalPages
		var qrCursorTotalPages int64

		if o.CursorTotalPages != nil {
			qrCursorTotalPages = *o.CursorTotalPages
		}
		qCursorTotalPages := swag.FormatInt64(qrCursorTotalPages)
		if qCursorTotalPages != "" {

			if err := r.SetQueryParam("Cursor.totalPages", qCursorTotalPages); err != nil {
				return err
			}
		}
	}

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime strfmt.DateTime

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.EnterpriseID != nil {

		// query param enterpriseId
		var qrEnterpriseID string

		if o.EnterpriseID != nil {
			qrEnterpriseID = *o.EnterpriseID
		}
		qEnterpriseID := qrEnterpriseID
		if qEnterpriseID != "" {

			if err := r.SetQueryParam("enterpriseId", qEnterpriseID); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.MetricType != nil {

		// query param metricType
		var qrMetricType string

		if o.MetricType != nil {
			qrMetricType = *o.MetricType
		}
		qMetricType := qrMetricType
		if qMetricType != "" {

			if err := r.SetQueryParam("metricType", qMetricType); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime strfmt.DateTime

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2 binds the parameter Cursor.orderBy
func (o *EdgeApplicationInstanceStatusGetEdgeApplicationInstanceTopTalkers2Params) bindParamCursorOrderBy(formats strfmt.Registry) []string {
	cursorOrderByIR := o.CursorOrderBy

	var cursorOrderByIC []string
	for _, cursorOrderByIIR := range cursorOrderByIR { // explode []string

		cursorOrderByIIV := cursorOrderByIIR // string as string
		cursorOrderByIC = append(cursorOrderByIC, cursorOrderByIIV)
	}

	// items.CollectionFormat: "multi"
	cursorOrderByIS := swag.JoinByFormat(cursorOrderByIC, "multi")

	return cursorOrderByIS
}
