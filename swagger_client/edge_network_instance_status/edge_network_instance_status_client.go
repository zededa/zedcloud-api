// Copyright (c) 2018-2021 Zededa, Inc.\n// SPDX-License-Identifier: Apache-2.0\n
// Code generated by go-swagger; DO NOT EDIT.

package edge_network_instance_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge network instance status API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge network instance status API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatus(params *EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusOK, error)

	EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByName(params *EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameOK, error)

	EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTags(params *EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsOK, error)

	EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatus(params *EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusOK, error)

	EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfig(params *EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatus gets edge network instance status

Get the status of an edge network instance as reported by the edge node where the edge network instance has been deployed.
*/
func (a *Client) EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatus(params *EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceStatus_GetEdgeNetworkInstanceStatus",
		Method:             "GET",
		PathPattern:        "/v1/netinsts/id/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByName gets edge network instance status

Get the status of an edge network instance as reported by the edge node where the edge network instance has been deployed.
*/
func (a *Client) EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByName(params *EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceStatus_GetEdgeNetworkInstanceStatusByName",
		Method:             "GET",
		PathPattern:        "/v1/netinsts/name/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceStatusGetEdgeNetworkInstanceStatusByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTags queries network instance tags

Netork instance tags LIST API is to fetch the interfaces tags attached to app instances.
*/
func (a *Client) EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTags(params *EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceStatus_GetNetworkInstanceInterfaceTags",
		Method:             "GET",
		PathPattern:        "/v1/netinsts/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceStatusGetNetworkInstanceInterfaceTagsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatus queries status of edge network instances

Query the status of edge network instances as reported by the edge nodes where the edge network instances have been deployed.
*/
func (a *Client) EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatus(params *EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceStatus_QueryEdgeNetworkInstanceStatus",
		Method:             "GET",
		PathPattern:        "/v1/netinsts/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfig queries status and config of edge network instances

Query the status and config of edge network instances as reported by the edge nodes where the edge network instances have been deployed.
*/
func (a *Client) EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfig(params *EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceStatus_QueryEdgeNetworkInstanceStatusConfig",
		Method:             "GET",
		PathPattern:        "/v1/netinsts/status-config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceStatusQueryEdgeNetworkInstanceStatusConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
