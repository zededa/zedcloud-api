// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package edge_diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/zedcloud-api/swagger_models"
)

// EdgeDiagnosticsGetResourceMetricsTimelineReader is a Reader for the EdgeDiagnosticsGetResourceMetricsTimeline structure.
type EdgeDiagnosticsGetResourceMetricsTimelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EdgeDiagnosticsGetResourceMetricsTimelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEdgeDiagnosticsGetResourceMetricsTimelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEdgeDiagnosticsGetResourceMetricsTimelineBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEdgeDiagnosticsGetResourceMetricsTimelineUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEdgeDiagnosticsGetResourceMetricsTimelineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEdgeDiagnosticsGetResourceMetricsTimelineInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewEdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewEdgeDiagnosticsGetResourceMetricsTimelineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEdgeDiagnosticsGetResourceMetricsTimelineOK creates a EdgeDiagnosticsGetResourceMetricsTimelineOK with default headers values
func NewEdgeDiagnosticsGetResourceMetricsTimelineOK() *EdgeDiagnosticsGetResourceMetricsTimelineOK {
	return &EdgeDiagnosticsGetResourceMetricsTimelineOK{}
}

/* EdgeDiagnosticsGetResourceMetricsTimelineOK describes a response with status code 200, with default header values.

A successful response.
*/
type EdgeDiagnosticsGetResourceMetricsTimelineOK struct {
	Payload *swagger_models.MetricQueryResponse
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineOK) Error() string {
	return fmt.Sprintf("[GET /v1/events/timeSeries/{mType}][%d] edgeDiagnosticsGetResourceMetricsTimelineOK  %+v", 200, o.Payload)
}
func (o *EdgeDiagnosticsGetResourceMetricsTimelineOK) GetPayload() *swagger_models.MetricQueryResponse {
	return o.Payload
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.MetricQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeDiagnosticsGetResourceMetricsTimelineBadRequest creates a EdgeDiagnosticsGetResourceMetricsTimelineBadRequest with default headers values
func NewEdgeDiagnosticsGetResourceMetricsTimelineBadRequest() *EdgeDiagnosticsGetResourceMetricsTimelineBadRequest {
	return &EdgeDiagnosticsGetResourceMetricsTimelineBadRequest{}
}

/* EdgeDiagnosticsGetResourceMetricsTimelineBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type EdgeDiagnosticsGetResourceMetricsTimelineBadRequest struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/events/timeSeries/{mType}][%d] edgeDiagnosticsGetResourceMetricsTimelineBadRequest  %+v", 400, o.Payload)
}
func (o *EdgeDiagnosticsGetResourceMetricsTimelineBadRequest) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeDiagnosticsGetResourceMetricsTimelineUnauthorized creates a EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized with default headers values
func NewEdgeDiagnosticsGetResourceMetricsTimelineUnauthorized() *EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized {
	return &EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized{}
}

/* EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/events/timeSeries/{mType}][%d] edgeDiagnosticsGetResourceMetricsTimelineUnauthorized  %+v", 401, o.Payload)
}
func (o *EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeDiagnosticsGetResourceMetricsTimelineForbidden creates a EdgeDiagnosticsGetResourceMetricsTimelineForbidden with default headers values
func NewEdgeDiagnosticsGetResourceMetricsTimelineForbidden() *EdgeDiagnosticsGetResourceMetricsTimelineForbidden {
	return &EdgeDiagnosticsGetResourceMetricsTimelineForbidden{}
}

/* EdgeDiagnosticsGetResourceMetricsTimelineForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-app level access permission for the operation or does not have access scope to the project.
*/
type EdgeDiagnosticsGetResourceMetricsTimelineForbidden struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/events/timeSeries/{mType}][%d] edgeDiagnosticsGetResourceMetricsTimelineForbidden  %+v", 403, o.Payload)
}
func (o *EdgeDiagnosticsGetResourceMetricsTimelineForbidden) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeDiagnosticsGetResourceMetricsTimelineInternalServerError creates a EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError with default headers values
func NewEdgeDiagnosticsGetResourceMetricsTimelineInternalServerError() *EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError {
	return &EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError{}
}

/* EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/events/timeSeries/{mType}][%d] edgeDiagnosticsGetResourceMetricsTimelineInternalServerError  %+v", 500, o.Payload)
}
func (o *EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout creates a EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout with default headers values
func NewEdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout() *EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout {
	return &EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout{}
}

/* EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout struct {
	Payload *swagger_models.ZsrvResponse
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/events/timeSeries/{mType}][%d] edgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout  %+v", 504, o.Payload)
}
func (o *EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout) GetPayload() *swagger_models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeDiagnosticsGetResourceMetricsTimelineDefault creates a EdgeDiagnosticsGetResourceMetricsTimelineDefault with default headers values
func NewEdgeDiagnosticsGetResourceMetricsTimelineDefault(code int) *EdgeDiagnosticsGetResourceMetricsTimelineDefault {
	return &EdgeDiagnosticsGetResourceMetricsTimelineDefault{
		_statusCode: code,
	}
}

/* EdgeDiagnosticsGetResourceMetricsTimelineDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type EdgeDiagnosticsGetResourceMetricsTimelineDefault struct {
	_statusCode int

	Payload *swagger_models.GooglerpcStatus
}

// Code gets the status code for the edge diagnostics get resource metrics timeline default response
func (o *EdgeDiagnosticsGetResourceMetricsTimelineDefault) Code() int {
	return o._statusCode
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineDefault) Error() string {
	return fmt.Sprintf("[GET /v1/events/timeSeries/{mType}][%d] EdgeDiagnostics_GetResourceMetricsTimeline default  %+v", o._statusCode, o.Payload)
}
func (o *EdgeDiagnosticsGetResourceMetricsTimelineDefault) GetPayload() *swagger_models.GooglerpcStatus {
	return o.Payload
}

func (o *EdgeDiagnosticsGetResourceMetricsTimelineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(swagger_models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
