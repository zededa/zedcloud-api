// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by go-swagger; DO NOT EDIT.

package datastore_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new datastore configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for datastore configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DatastoreConfigurationCreateDatastore(params *DatastoreConfigurationCreateDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationCreateDatastoreOK, error)

	DatastoreConfigurationDeleteDatastore(params *DatastoreConfigurationDeleteDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationDeleteDatastoreOK, error)

	DatastoreConfigurationGetDatastore(params *DatastoreConfigurationGetDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationGetDatastoreOK, error)

	DatastoreConfigurationGetDatastoreByName(params *DatastoreConfigurationGetDatastoreByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationGetDatastoreByNameOK, error)

	DatastoreConfigurationQueryDatastores(params *DatastoreConfigurationQueryDatastoresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationQueryDatastoresOK, error)

	DatastoreConfigurationUpdateDatastore(params *DatastoreConfigurationUpdateDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationUpdateDatastoreOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DatastoreConfigurationCreateDatastore creates datastore

  Create a Datastore record.
*/
func (a *Client) DatastoreConfigurationCreateDatastore(params *DatastoreConfigurationCreateDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationCreateDatastoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatastoreConfigurationCreateDatastoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DatastoreConfiguration_CreateDatastore",
		Method:             "POST",
		PathPattern:        "/v1/datastores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DatastoreConfigurationCreateDatastoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DatastoreConfigurationCreateDatastoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DatastoreConfigurationCreateDatastoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DatastoreConfigurationDeleteDatastore deletes datastore

  Delete a datastore record.
*/
func (a *Client) DatastoreConfigurationDeleteDatastore(params *DatastoreConfigurationDeleteDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationDeleteDatastoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatastoreConfigurationDeleteDatastoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DatastoreConfiguration_DeleteDatastore",
		Method:             "DELETE",
		PathPattern:        "/v1/datastores/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DatastoreConfigurationDeleteDatastoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DatastoreConfigurationDeleteDatastoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DatastoreConfigurationDeleteDatastoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DatastoreConfigurationGetDatastore gets datastore

  Get the configuration (without security details) of a datastore record.
*/
func (a *Client) DatastoreConfigurationGetDatastore(params *DatastoreConfigurationGetDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationGetDatastoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatastoreConfigurationGetDatastoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DatastoreConfiguration_GetDatastore",
		Method:             "GET",
		PathPattern:        "/v1/datastores/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DatastoreConfigurationGetDatastoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DatastoreConfigurationGetDatastoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DatastoreConfigurationGetDatastoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DatastoreConfigurationGetDatastoreByName gets datastore

  Get the configuration (without security details) of a datastore record.
*/
func (a *Client) DatastoreConfigurationGetDatastoreByName(params *DatastoreConfigurationGetDatastoreByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationGetDatastoreByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatastoreConfigurationGetDatastoreByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DatastoreConfiguration_GetDatastoreByName",
		Method:             "GET",
		PathPattern:        "/v1/datastores/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DatastoreConfigurationGetDatastoreByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DatastoreConfigurationGetDatastoreByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DatastoreConfigurationGetDatastoreByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DatastoreConfigurationQueryDatastores queries datastores

  Query the datastore records.
*/
func (a *Client) DatastoreConfigurationQueryDatastores(params *DatastoreConfigurationQueryDatastoresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationQueryDatastoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatastoreConfigurationQueryDatastoresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DatastoreConfiguration_QueryDatastores",
		Method:             "GET",
		PathPattern:        "/v1/datastores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DatastoreConfigurationQueryDatastoresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DatastoreConfigurationQueryDatastoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DatastoreConfigurationQueryDatastoresDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DatastoreConfigurationUpdateDatastore updates datastore

  Update a datastore record. The usual pattern to update a datastore record is to retrieve the record and update with the modified values in a new body to update the datastore record.
*/
func (a *Client) DatastoreConfigurationUpdateDatastore(params *DatastoreConfigurationUpdateDatastoreParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DatastoreConfigurationUpdateDatastoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatastoreConfigurationUpdateDatastoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DatastoreConfiguration_UpdateDatastore",
		Method:             "PUT",
		PathPattern:        "/v1/datastores/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DatastoreConfigurationUpdateDatastoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DatastoreConfigurationUpdateDatastoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DatastoreConfigurationUpdateDatastoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
